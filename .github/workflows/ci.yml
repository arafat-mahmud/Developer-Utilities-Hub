name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:  # Added to enable manual triggering of the workflow
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI?'
        required: true
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Install additional tools for formatting tests
      run: |
        pip install black isort
        npm install -g prettier || true

    - name: Run tests with pytest
      run: |
        pytest -v --cov=devhub --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check code formatting with Black
      run: black --check --diff src tests

    - name: Check import sorting with isort
      run: isort --check-only --diff src tests

    - name: Lint with Ruff
      run: ruff check src tests

    - name: Type check with MyPy
      run: mypy src

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Bandit security scan
      run: bandit -r src -f json -o bandit-report.json || true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

    - name: Check dependencies for vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Upload Safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.json

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs
        mkdocs build --strict

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/site/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install from wheel
      run: |
        pip install dist/*.whl

    - name: Test CLI installation
      run: |
        devhub --version
        devhub --help

    - name: Run integration tests
      run: |
        # Test basic commands
        echo "print('hello')" > test.py
        devhub format code test.py --check || true
        
        # Test API command
        devhub api test --url https://httpbin.org/get || true

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: devhub/cli
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false  # Only build, don't push (requires Docker Hub credentials)
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true  # Load the image into Docker for local testing

    - name: Test Docker image
      run: |
        # List available Docker images
        echo "Available Docker images:"
        docker images
        
        # Tag with simpler name for testing
        docker tag $(echo "${{ steps.meta.outputs.tags }}" | head -n 1) devhub-test:latest
        
        # Test the local image
        docker run --rm devhub-test:latest --version || echo "Command failed, image may not have an entrypoint"

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build, integration-test]
    if: success() && (github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true'))
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Debug event info
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Is workflow_dispatch: ${{ github.event_name == 'workflow_dispatch' }}"
        echo "Publish to PyPI input: ${{ github.event.inputs.publish_to_pypi }}"
        echo "Condition check result: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true') }}"
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Display package info
      run: |
        echo "📦 Publishing package to PyPI"
        echo "Package contents:"
        ls -la dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
        skip-existing: true  # Skip if version already exists on PyPI
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Display package info
      run: |
        echo "📦 Publishing package to PyPI"
        echo "Package contents:"
        ls -la dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
        skip-existing: true  # Skip if version already exists on PyPI

  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [test, lint, security, docs, build]
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Prepare status message
      id: message
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" ]]; then
          echo "status=✅ DevHub CI/CD pipeline completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=❌ DevHub CI/CD pipeline failed!" >> $GITHUB_OUTPUT
        fi

    - name: Log completion
      run: |
        echo "${{ steps.message.outputs.status }}"
