name: Deploy Documentation

on:
  push:
    branches: [ main ]
    paths: 
      - 'docs/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-and-deploy:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper git operations

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-docs-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-docs-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs
        mkdocs build --strict --verbose

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/site/
        retention-days: 7

  # We'll use the deploy-docs.yml workflow for actual deployment
  # since it uses the git-based approach which doesn't require Pages to be configured

  notify:
    name: Notify on Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
    - name: Notify on Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "‚úÖ Documentation built successfully!"
        echo "üìñ Use deploy-docs.yml workflow for deployment to GitHub Pages"

    - name: Notify on Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Documentation build failed!"
        echo "Check the logs above for details."
        # Not using exit 1 to avoid workflow error annotation
