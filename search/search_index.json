{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DevHub - The Swiss Army Knife for Developers","text":"<p>Welcome to DevHub, a comprehensive command-line interface (CLI) tool that combines multiple developer utilities into one powerful, extensible platform.</p>"},{"location":"#what-is-devhub","title":"\ud83d\ude80 What is DevHub?","text":"<p>DevHub is designed to be the ultimate developer toolkit, offering:</p> <ul> <li>Multi-language code formatting for Python, JavaScript, TypeScript, Go, Rust, JSON, and YAML</li> <li>API testing and benchmarking with beautiful output</li> <li>Git workflow automation for branch management and commit analysis  </li> <li>Security utilities for password generation and encryption</li> <li>Data format conversion between JSON, CSV, YAML, and XML</li> <li>System monitoring for performance and process management</li> <li>Extensible plugin architecture for custom tools</li> </ul>"},{"location":"#quick-start","title":"\u26a1 Quick Start","text":"<pre><code># Install DevHub\npip install devhub-cli\n\n# Format your code\ndevhub format code --lang python ./src\n\n# Test an API\ndevhub api test --url https://api.github.com/users/octocat\n\n# Generate a secure password\ndevhub gen password --length 20\n\n# Clean up Git branches  \ndevhub git clean-branches --merged\n</code></pre>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"#beautiful-cli-experience","title":"\ud83c\udfa8 Beautiful CLI Experience","text":"<ul> <li>Rich, colorful output with progress indicators</li> <li>Intuitive command structure</li> <li>Comprehensive help system</li> <li>Tab completion support</li> </ul>"},{"location":"#plugin-architecture","title":"\ud83e\udde9 Plugin Architecture","text":"<ul> <li>Modular design for easy extensibility</li> <li>Plugin-specific configuration</li> <li>Hot-reloading during development</li> <li>Community plugin ecosystem</li> </ul>"},{"location":"#powerful-configuration","title":"\u2699\ufe0f Powerful Configuration","text":"<ul> <li>Multiple configuration formats (TOML, YAML, JSON)</li> <li>Environment variable support</li> <li>Per-project configuration</li> <li>Sensible defaults</li> </ul>"},{"location":"#multiple-installation-options","title":"\ud83d\udc33 Multiple Installation Options","text":"<ul> <li>PyPI package: <code>pip install devhub-cli</code></li> <li>Docker image: <code>docker pull devhub/cli</code></li> <li>From source: Easy development setup</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>Installation Guide - Get DevHub up and running</li> <li>Quick Start - Essential commands and workflows</li> <li>User Guide - Detailed feature documentation</li> <li>Plugin Development - Create your own plugins</li> <li>Contributing - Join our community</li> </ul>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>GitHub: github.com/username/devhub</li> <li>Twitter: @devhub_cli</li> <li>Discord: Join our server</li> <li>Discussions: GitHub Discussions</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>DevHub is open source software licensed under the MIT License.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to DevHub will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Plugin marketplace integration</li> <li>Web dashboard interface</li> <li>AI-powered code suggestions</li> <li>Cloud deployment tools</li> <li>Advanced performance monitoring</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Improved startup performance</li> <li>Enhanced error messages</li> <li>Better configuration validation</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Legacy configuration format (will be removed in v2.0)</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Enhanced input validation</li> <li>Improved secret handling</li> </ul>"},{"location":"changelog/#100-2025-01-15","title":"[1.0.0] - 2025-01-15","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Core Framework</li> <li>Plugin-based architecture</li> <li>Comprehensive CLI interface</li> <li>Configuration management system</li> <li> <p>Event-driven plugin communication</p> </li> <li> <p>Format Plugin</p> </li> <li>Multi-language code formatting</li> <li>Python support (Black, autopep8, yapf)</li> <li>JavaScript/TypeScript support (Prettier)</li> <li>Go support (gofmt)</li> <li>Rust support (rustfmt)</li> <li>JSON/YAML formatting</li> <li> <p>Import sorting with isort</p> </li> <li> <p>API Plugin</p> </li> <li>HTTP client with rich output</li> <li>Authentication support (Bearer, Basic, API Key)</li> <li>Request/response formatting</li> <li>Benchmarking capabilities</li> <li> <p>Template system for reusable requests</p> </li> <li> <p>Security Plugin</p> </li> <li>Secure password generation</li> <li>Hash calculation (MD5, SHA1, SHA256, SHA512)</li> <li>File encryption/decryption</li> <li> <p>Security scanning utilities</p> </li> <li> <p>Git Plugin</p> </li> <li>Branch management and cleanup</li> <li>Commit analysis and statistics</li> <li>Conventional commits support</li> <li> <p>Repository health checks</p> </li> <li> <p>Data Plugin</p> </li> <li>Format conversion (JSON \u2194 CSV \u2194 YAML \u2194 XML)</li> <li>Data validation</li> <li> <p>Schema-based transformation</p> </li> <li> <p>System Plugin</p> </li> <li>Resource monitoring</li> <li>Process management</li> <li>Performance analysis</li> <li>Alert system</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>N/A (Initial release)</li> </ul>"},{"location":"changelog/#security_1","title":"Security","text":"<ul> <li>Secure password generation using cryptographically secure random</li> <li>Input validation for all user inputs</li> <li>Safe file operations with path validation</li> </ul>"},{"location":"changelog/#090-2024-12-20-beta","title":"[0.9.0] - 2024-12-20 (Beta)","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Beta release for early testing</li> <li>Core plugin framework</li> <li>Basic formatting support</li> <li>Configuration system</li> <li>CLI interface</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Refined plugin architecture</li> <li>Improved error handling</li> <li>Enhanced documentation</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Plugin loading issues</li> <li>Configuration parsing bugs</li> <li>CLI command registration</li> </ul>"},{"location":"changelog/#080-2024-12-01-alpha","title":"[0.8.0] - 2024-12-01 (Alpha)","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Alpha release for internal testing</li> <li>Initial plugin system</li> <li>Basic CLI framework</li> <li>Configuration prototype</li> </ul>"},{"location":"changelog/#known-issues","title":"Known Issues","text":"<ul> <li>Limited plugin support</li> <li>Basic error handling</li> <li>Incomplete documentation</li> </ul>"},{"location":"changelog/#development-milestones","title":"Development Milestones","text":""},{"location":"changelog/#phase-1-foundation-v100","title":"Phase 1: Foundation \u2705 (v1.0.0)","text":"<ul> <li>[x] Core plugin architecture</li> <li>[x] CLI framework with Click + Rich</li> <li>[x] Configuration management</li> <li>[x] Essential plugins (format, api, security)</li> <li>[x] Comprehensive testing</li> <li>[x] Documentation</li> </ul>"},{"location":"changelog/#phase-2-enhancement-v110-v150","title":"Phase 2: Enhancement \ud83d\udea7 (v1.1.0 - v1.5.0)","text":"<ul> <li>[ ] Advanced Git utilities</li> <li>[ ] Data processing enhancements</li> <li>[ ] System monitoring improvements</li> <li>[ ] Performance optimizations</li> <li>[ ] Plugin marketplace</li> </ul>"},{"location":"changelog/#phase-3-integration-v200","title":"Phase 3: Integration \ud83d\udca1 (v2.0.0)","text":"<ul> <li>[ ] Web dashboard</li> <li>[ ] VS Code extension</li> <li>[ ] GitHub Actions integration</li> <li>[ ] Cloud deployment tools</li> <li>[ ] AI-powered features</li> </ul>"},{"location":"changelog/#phase-4-ecosystem-v300","title":"Phase 4: Ecosystem \ud83c\udf1f (v3.0.0)","text":"<ul> <li>[ ] Plugin marketplace</li> <li>[ ] Community contributions</li> <li>[ ] Enterprise features</li> <li>[ ] Advanced analytics</li> <li>[ ] Multi-language support</li> </ul>"},{"location":"changelog/#version-history","title":"Version History","text":"Version Release Date Key Features 1.0.0 2025-01-15 Initial stable release 0.9.0 2024-12-20 Beta release 0.8.0 2024-12-01 Alpha release"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"changelog/#v100","title":"v1.0.0","text":"<ul> <li>Initial stable API - no breaking changes from beta</li> </ul>"},{"location":"changelog/#v090-v100","title":"v0.9.0 \u2192 v1.0.0","text":"<ul> <li>Configuration format standardized</li> <li>Plugin API finalized</li> <li>CLI command structure locked</li> </ul>"},{"location":"changelog/#migration-guides","title":"Migration Guides","text":""},{"location":"changelog/#migrating-from-v090-to-v100","title":"Migrating from v0.9.0 to v1.0.0","text":"<ol> <li> <p>Configuration Changes <pre><code># Update configuration format\ndevhub config migrate --from-version 0.9.0\n</code></pre></p> </li> <li> <p>Plugin Updates <pre><code># Update all plugins\ndevhub plugin update\n</code></pre></p> </li> <li> <p>Command Changes</p> </li> <li><code>devhub fmt</code> \u2192 <code>devhub format code</code></li> <li><code>devhub http</code> \u2192 <code>devhub api test</code></li> </ol>"},{"location":"changelog/#contributors","title":"Contributors","text":""},{"location":"changelog/#core-team","title":"Core Team","text":"<ul> <li>Lead Developer: DevHub Team</li> <li>Plugin Architecture: DevHub Core Team</li> <li>Documentation: DevHub Docs Team</li> </ul>"},{"location":"changelog/#community-contributors","title":"Community Contributors","text":"<ul> <li>Thanks to all beta testers and early adopters</li> <li>Special thanks to plugin developers</li> <li>Appreciation for documentation improvements</li> </ul>"},{"location":"changelog/#acknowledgments","title":"Acknowledgments","text":""},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Click: CLI framework</li> <li>Rich: Beautiful terminal output</li> <li>Black: Python code formatting</li> <li>Prettier: JavaScript/TypeScript formatting</li> <li>requests: HTTP client library</li> </ul>"},{"location":"changelog/#inspiration","title":"Inspiration","text":"<ul> <li>Inspired by tools like Git, Docker CLI, and AWS CLI</li> <li>Motivated by the need for unified developer tooling</li> <li>Built on the principles of extensibility and usability</li> </ul>"},{"location":"changelog/#release-process","title":"Release Process","text":""},{"location":"changelog/#versioning-strategy","title":"Versioning Strategy","text":"<ul> <li>Major: Breaking changes, new architecture</li> <li>Minor: New features, backward compatible</li> <li>Patch: Bug fixes, small improvements</li> </ul>"},{"location":"changelog/#release-schedule","title":"Release Schedule","text":"<ul> <li>Major releases: Every 12-18 months</li> <li>Minor releases: Every 2-3 months</li> <li>Patch releases: As needed for critical fixes</li> </ul>"},{"location":"changelog/#support-policy","title":"Support Policy","text":"<ul> <li>Current version: Full support</li> <li>Previous minor: Security fixes only</li> <li>Older versions: Community support</li> </ul>"},{"location":"changelog/#future-roadmap","title":"Future Roadmap","text":""},{"location":"changelog/#short-term-next-6-months","title":"Short Term (Next 6 months)","text":"<ul> <li>Performance improvements</li> <li>Additional language support</li> <li>Enhanced error messages</li> <li>Plugin development tools</li> </ul>"},{"location":"changelog/#medium-term-6-12-months","title":"Medium Term (6-12 months)","text":"<ul> <li>Web interface</li> <li>CI/CD integrations</li> <li>Advanced monitoring</li> <li>Plugin marketplace</li> </ul>"},{"location":"changelog/#long-term-1-2-years","title":"Long Term (1-2 years)","text":"<ul> <li>AI-powered suggestions</li> <li>Cloud-native features</li> <li>Enterprise integrations</li> <li>Multi-platform desktop app</li> </ul>"},{"location":"changelog/#feedback-and-issues","title":"Feedback and Issues","text":""},{"location":"changelog/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Bug reports: GitHub Issues</li> <li>Feature requests: GitHub Discussions</li> <li>Security issues: security@devhub.dev</li> </ul>"},{"location":"changelog/#community","title":"Community","text":"<ul> <li>Discord: DevHub Community</li> <li>Twitter: @devhub_cli</li> <li>Blog: DevHub Blog</li> </ul> <p>For the complete development history, see the Git commit history.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>DevHub provides extensive configuration options to customize its behavior for your specific needs. Configuration can be set globally, per-project, or via environment variables.</p>"},{"location":"configuration/#configuration-files","title":"\ud83d\udcc1 Configuration Files","text":"<p>DevHub supports multiple configuration file formats:</p>"},{"location":"configuration/#toml-recommended","title":"TOML (Recommended)","text":"<pre><code># devhub.toml or .devhub.toml\n[format]\nline_length = 88\nauto_detect = true\n\n[format.python]\nenabled = true\nblack_args = [\"--fast\"]\n\n[api]\ndefault_timeout = 30\nfollow_redirects = true\n\n[security]\npassword_length = 16\ninclude_symbols = true\n</code></pre>"},{"location":"configuration/#yaml","title":"YAML","text":"<pre><code># devhub.yaml or .devhub.yaml\nformat:\n  line_length: 88\n  auto_detect: true\n  python:\n    enabled: true\n    black_args: [\"--fast\"]\n\napi:\n  default_timeout: 30\n  follow_redirects: true\n\nsecurity:\n  password_length: 16\n  include_symbols: true\n</code></pre>"},{"location":"configuration/#json","title":"JSON","text":"<pre><code>{\n  \"format\": {\n    \"line_length\": 88,\n    \"auto_detect\": true,\n    \"python\": {\n      \"enabled\": true,\n      \"black_args\": [\"--fast\"]\n    }\n  },\n  \"api\": {\n    \"default_timeout\": 30,\n    \"follow_redirects\": true\n  }\n}\n</code></pre>"},{"location":"configuration/#configuration-discovery","title":"\ud83d\udd0d Configuration Discovery","text":"<p>DevHub searches for configuration files in this order:</p> <ol> <li>Command-line arguments (<code>--config path/to/config</code>)</li> <li>Environment variable (<code>DEVHUB_CONFIG_PATH</code>)</li> <li>Current directory (<code>.devhub.toml</code>, <code>devhub.toml</code>, etc.)</li> <li>Parent directories (walking up the tree)</li> <li>Home directory (<code>~/.devhub/config.toml</code>)</li> <li>System directory (<code>/etc/devhub/config.toml</code>)</li> </ol>"},{"location":"configuration/#configuration-sections","title":"\u2699\ufe0f Configuration Sections","text":""},{"location":"configuration/#format-plugin","title":"Format Plugin","text":"<pre><code>[format]\n# Global formatting options\nenabled = true\nauto_detect = true  # Auto-detect file types\nline_length = 88\ndry_run = false\nbackup = true\n\n[format.python]\nenabled = true\nformatter = \"black\"  # or \"autopep8\", \"yapf\"\nline_length = 88\ntarget_version = [\"py38\", \"py39\", \"py310\"]\nskip_string_normalization = false\nblack_args = []\nisort_enabled = true\nisort_profile = \"black\"\n\n[format.javascript]\nenabled = true\nformatter = \"prettier\"\nprint_width = 80\ntab_width = 2\nuse_tabs = false\nsemicolons = true\nsingle_quote = false\ntrailing_comma = \"es5\"\n\n[format.typescript]\nenabled = true\nformatter = \"prettier\"\nprint_width = 80\ntab_width = 2\n\n[format.go]\nenabled = true\nformatter = \"gofmt\"\nsimplify = true\n\n[format.rust]\nenabled = true\nformatter = \"rustfmt\"\nedition = \"2021\"\n\n[format.json]\nenabled = true\nindent = 2\nsort_keys = false\n\n[format.yaml]\nenabled = true\nindent = 2\nwidth = 80\n</code></pre>"},{"location":"configuration/#api-plugin","title":"API Plugin","text":"<pre><code>[api]\nenabled = true\ndefault_timeout = 30\nmax_retries = 3\nfollow_redirects = true\nverify_ssl = true\nuser_agent = \"DevHub/1.0.0\"\n\n[api.headers]\n# Default headers for all requests\n\"User-Agent\" = \"DevHub API Client\"\n\"Accept\" = \"application/json\"\n\n[api.auth]\n# Default authentication (can be overridden)\ntype = \"bearer\"  # or \"basic\", \"api_key\"\ntoken = \"${API_TOKEN}\"  # Environment variable\n\n[api.benchmark]\ndefault_requests = 100\ndefault_concurrency = 10\nmax_requests = 1000\nmax_concurrency = 50\n</code></pre>"},{"location":"configuration/#security-plugin","title":"Security Plugin","text":"<pre><code>[security]\nenabled = true\n\n[security.password]\nlength = 16\ninclude_uppercase = true\ninclude_lowercase = true\ninclude_numbers = true\ninclude_symbols = true\nexclude_similar = true  # Exclude 0, O, l, 1, etc.\ncustom_symbols = \"!@#$%^&amp;*\"\n\n[security.hash]\ndefault_algorithm = \"sha256\"\nsalt_length = 32\n\n[security.encryption]\ndefault_algorithm = \"AES-256-GCM\"\nkey_derivation = \"PBKDF2\"\niterations = 100000\n</code></pre>"},{"location":"configuration/#git-plugin","title":"Git Plugin","text":"<pre><code>[git]\nenabled = true\n\n[git.clean]\npreserve_branches = [\"main\", \"master\", \"develop\", \"staging\"]\nconfirm_before_delete = true\nremote_tracking = true\n\n[git.commit]\nconventional_commits = true\nauto_sign = false\ngpg_key_id = \"\"\n\n[git.hooks]\npre_commit_format = true\npre_push_test = false\n</code></pre>"},{"location":"configuration/#data-plugin","title":"Data Plugin","text":"<pre><code>[data]\nenabled = true\n\n[data.csv]\ndelimiter = \",\"\nquote_char = '\"'\nencoding = \"utf-8\"\nskip_blank_lines = true\n\n[data.json]\nindent = 2\nsort_keys = false\nensure_ascii = false\n\n[data.yaml]\ndefault_flow_style = false\nindent = 2\nwidth = 80\n</code></pre>"},{"location":"configuration/#system-plugin","title":"System Plugin","text":"<pre><code>[system]\nenabled = true\n\n[system.monitor]\ndefault_interval = 5\ndefault_duration = 60\ninclude_processes = true\ninclude_network = true\ninclude_disk = true\n\n[system.process]\nsort_by = \"cpu\"  # or \"memory\", \"name\", \"pid\"\nshow_threads = false\nfilter_system = false\n</code></pre>"},{"location":"configuration/#environment-variables","title":"\ud83c\udf0d Environment Variables","text":"<p>All configuration options can be set via environment variables using the pattern <code>DEVHUB_&lt;SECTION&gt;_&lt;KEY&gt;</code>:</p> <pre><code># Format configuration\nexport DEVHUB_FORMAT_LINE_LENGTH=100\nexport DEVHUB_FORMAT_PYTHON_ENABLED=true\n\n# API configuration\nexport DEVHUB_API_DEFAULT_TIMEOUT=60\nexport DEVHUB_API_AUTH_TOKEN=\"your-token-here\"\n\n# Security configuration\nexport DEVHUB_SECURITY_PASSWORD_LENGTH=20\n\n# Plugin enablement\nexport DEVHUB_PLUGINS_ENABLED=\"format,api,security\"\n</code></pre>"},{"location":"configuration/#cli-configuration","title":"\ud83d\udd27 CLI Configuration","text":"<p>Use the built-in configuration commands:</p> <pre><code># Initialize configuration with defaults\ndevhub config init\n\n# Show current configuration\ndevhub config show\n\n# Get specific values\ndevhub config get format.line_length\ndevhub config get api.default_timeout\n\n# Set configuration values\ndevhub config set format.line_length 100\ndevhub config set api.default_timeout 60\n\n# Unset configuration values\ndevhub config unset format.python.black_args\n\n# Reset to defaults\ndevhub config reset\n\n# Validate configuration\ndevhub config validate\n\n# Export configuration\ndevhub config export --format yaml &gt; devhub.yaml\n</code></pre>"},{"location":"configuration/#project-specific-configuration","title":"\ud83c\udfaf Project-specific Configuration","text":"<p>Create project-specific configurations:</p> <pre><code># Initialize project config\ncd my-project\ndevhub config init --local\n\n# This creates .devhub.toml in the current directory\n</code></pre> <p>Example project configuration: <pre><code># .devhub.toml (project root)\n[format]\nline_length = 120  # Wider for this project\n\n[format.python]\ntarget_version = [\"py39\"]  # Specific Python version\n\n[api]\nbase_url = \"http://localhost:3000\"  # Local development server\n\n[plugins]\nenabled = [\"format\", \"api\"]  # Only enable needed plugins\n</code></pre></p>"},{"location":"configuration/#configuration-templates","title":"\ud83d\udccb Configuration Templates","text":"<p>DevHub provides configuration templates for common use cases:</p> <pre><code># Python project template\ndevhub config template python\n\n# Web development template\ndevhub config template web\n\n# Enterprise template\ndevhub config template enterprise\n\n# Minimal template\ndevhub config template minimal\n</code></pre>"},{"location":"configuration/#secure-configuration","title":"\ud83d\udd12 Secure Configuration","text":"<p>For sensitive data like API tokens:</p> <pre><code>[api.auth]\n# Use environment variables\ntoken = \"${API_TOKEN}\"\n\n# Or use external key management\ntoken_file = \"/path/to/token/file\"\n\n# Or use system keyring\ntoken_keyring = \"devhub/api_token\"\n</code></pre>"},{"location":"configuration/#configuration-profiles","title":"\ud83e\uddea Configuration Profiles","text":"<p>Switch between different configuration profiles:</p> <pre><code># Create profiles\ndevhub config profile create development\ndevhub config profile create production\n\n# Switch profiles\ndevhub config profile use development\n\n# List profiles\ndevhub config profile list\n\n# Current profile\ndevhub config profile current\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"\u2705 Configuration Validation","text":"<p>DevHub validates configuration on startup:</p> <pre><code># Manually validate configuration\ndevhub config validate\n\n# Check for deprecated options\ndevhub config check-deprecated\n\n# Migration from old versions\ndevhub config migrate\n</code></pre>"},{"location":"configuration/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"configuration/#common-issues","title":"Common Issues","text":"<p>Configuration not found <pre><code># Check discovery path\ndevhub config where\n\n# Debug configuration loading\ndevhub --debug config show\n</code></pre></p> <p>Invalid configuration <pre><code># Validate syntax\ndevhub config validate\n\n# Check specific section\ndevhub config validate format\n</code></pre></p> <p>Environment variables not working <pre><code># List all DevHub environment variables\nenv | grep DEVHUB\n\n# Test variable expansion\ndevhub config get api.auth.token --expand\n</code></pre></p>"},{"location":"configuration/#examples","title":"\ud83d\udcda Examples","text":""},{"location":"configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code># Complete devhub.toml example\n[global]\nlog_level = \"INFO\"\ncolored_output = true\nprogress_bars = true\n\n[plugins]\nenabled = [\"format\", \"api\", \"security\", \"git\"]\nauto_update = false\n\n[format]\nline_length = 88\nauto_detect = true\nbackup = true\n\n[format.python]\nenabled = true\nformatter = \"black\"\nline_length = 88\nisort_enabled = true\n\n[api]\ndefault_timeout = 30\nfollow_redirects = true\nverify_ssl = true\n\n[security]\npassword_length = 16\ninclude_symbols = true\n\n[git]\npreserve_branches = [\"main\", \"develop\"]\nconventional_commits = true\n</code></pre> <p>For more configuration examples, see our Examples Repository.</p>"},{"location":"contributing/","title":"Contributing to DevHub","text":"<p>We welcome contributions from the community! This guide will help you get started with contributing to DevHub.</p>"},{"location":"contributing/#ways-to-contribute","title":"\ud83e\udd1d Ways to Contribute","text":"<ul> <li>Bug Reports: Help us identify and fix issues</li> <li>Feature Requests: Suggest new functionality</li> <li>Code Contributions: Submit pull requests</li> <li>Documentation: Improve docs and examples</li> <li>Testing: Help expand test coverage</li> <li>Community: Help others in discussions</li> </ul>"},{"location":"contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>GitHub account</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork the repository <pre><code># Fork on GitHub, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/devhub.git\ncd devhub\n</code></pre></p> </li> <li> <p>Set up development environment <pre><code># Create virtual environment\npython -m venv env\nsource env/bin/activate  # On Windows: env\\Scripts\\activate\n\n# Install development dependencies\npip install -e .\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Run tests to verify setup <pre><code>pytest\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":""},{"location":"contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code># Create feature branch\ngit checkout -b feature/your-feature-name\n\n# Or bug fix branch\ngit checkout -b fix/issue-number-description\n</code></pre>"},{"location":"contributing/#2-make-changes","title":"2. Make Changes","text":"<ul> <li>Write clear, well-documented code</li> <li>Follow the existing code style</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> </ul>"},{"location":"contributing/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run tests\npytest\n\n# Run linting\nflake8 src/\nblack --check src/\nisort --check-only src/\n\n# Run type checking\nmypy src/\n\n# Run security checks\nbandit -r src/\n</code></pre>"},{"location":"contributing/#4-commit-changes","title":"4. Commit Changes","text":"<pre><code># Stage changes\ngit add .\n\n# Commit with descriptive message\ngit commit -m \"feat: add new formatting option for Python files\n\n- Add support for custom line length configuration\n- Update documentation with new option\n- Add tests for line length validation\"\n</code></pre>"},{"location":"contributing/#5-push-and-create-pull-request","title":"5. Push and Create Pull Request","text":"<pre><code># Push to your fork\ngit push origin feature/your-feature-name\n\n# Create pull request on GitHub\n</code></pre>"},{"location":"contributing/#code-style","title":"\ud83d\udcdd Code Style","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<p>We use the following tools to maintain code quality:</p> <ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> <li>Flake8: Linting</li> <li>MyPy: Type checking</li> </ul> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.black]\nline-length = 88\ntarget-version = ['py38', 'py39', 'py310', 'py311']\n\n[tool.isort]\nprofile = \"black\"\nline_length = 88\n\n[tool.mypy]\npython_version = \"3.8\"\nstrict = true\n</code></pre>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>We follow Conventional Commits:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Adding/updating tests - <code>chore</code>: Maintenance tasks</p> <p>Examples: <pre><code>feat(format): add support for custom Python formatters\n\nfix(api): handle timeout errors gracefully\n\ndocs: update installation guide for Windows users\n\ntest: add integration tests for Git plugin\n</code></pre></p>"},{"location":"contributing/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_format.py\n\n# Run with coverage\npytest --cov=devhub --cov-report=html\n\n# Run only unit tests\npytest tests/unit/\n\n# Run only integration tests\npytest tests/integration/\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":""},{"location":"contributing/#unit-tests","title":"Unit Tests","text":"<pre><code>import unittest\nfrom devhub.plugins.format import FormatPlugin\n\nclass TestFormatPlugin(unittest.TestCase):\n    def setUp(self):\n        self.plugin = FormatPlugin()\n        self.plugin.initialize()\n\n    def test_format_python_code(self):\n        \"\"\"Test Python code formatting\"\"\"\n        input_code = \"def hello( name ):\\n    print(f'Hello {name}!')\"\n        expected = \"def hello(name):\\n    print(f'Hello {name}!')\\n\"\n\n        result = self.plugin._format_python(input_code, Path(\"test.py\"))\n        self.assertEqual(result, expected)\n\n    def tearDown(self):\n        self.plugin.cleanup()\n</code></pre>"},{"location":"contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>from click.testing import CliRunner\nfrom devhub.cli import cli\n\ndef test_format_command_integration():\n    \"\"\"Test format command end-to-end\"\"\"\n    runner = CliRunner()\n\n    with runner.isolated_filesystem():\n        # Create test file\n        with open('test.py', 'w') as f:\n            f.write('def hello( name ):\\n    print(f\"Hello {name}!\")')\n\n        # Run format command\n        result = runner.invoke(cli, ['format', 'code', 'test.py'])\n\n        # Check result\n        assert result.exit_code == 0\n\n        # Check file was formatted\n        with open('test.py', 'r') as f:\n            content = f.read()\n            assert 'def hello(name):' in content\n</code></pre>"},{"location":"contributing/#test-coverage","title":"Test Coverage","text":"<p>We aim for 90%+ test coverage. Check coverage with:</p> <pre><code>pytest --cov=devhub --cov-report=html\nopen htmlcov/index.html  # View coverage report\n</code></pre>"},{"location":"contributing/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"contributing/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Add screenshots for UI features</li> <li>Follow the existing documentation structure</li> </ul>"},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md                    # Home page\n\u2502   \u251c\u2500\u2500 installation.md             # Installation guide\n\u2502   \u251c\u2500\u2500 quick-start.md              # Quick start guide\n\u2502   \u251c\u2500\u2500 user-guide/                 # User documentation\n\u2502   \u251c\u2500\u2500 plugins/                    # Plugin development\n\u2502   \u251c\u2500\u2500 reference/                  # API reference\n\u2502   \u2514\u2500\u2500 contributing.md             # This file\n\u251c\u2500\u2500 mkdocs.yml                      # MkDocs configuration\n\u2514\u2500\u2500 requirements.txt                # Documentation dependencies\n</code></pre>"},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install documentation dependencies\npip install -r docs/requirements.txt\n\n# Serve documentation locally\ncd docs\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"contributing/#code-review-process","title":"\ud83d\udd0d Code Review Process","text":""},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ol> <li>Clear description: Explain what your PR does and why</li> <li>Link issues: Reference related issues with \"Fixes #123\"</li> <li>Screenshots: Include screenshots for UI changes</li> <li>Tests: Ensure all tests pass</li> <li>Documentation: Update docs for new features</li> </ol>"},{"location":"contributing/#review-criteria","title":"Review Criteria","text":"<ul> <li>Code quality and style</li> <li>Test coverage</li> <li>Documentation completeness</li> <li>Performance impact</li> <li>Backward compatibility</li> <li>Security implications</li> </ul>"},{"location":"contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass</li> <li>At least one maintainer approval required</li> <li>Address review feedback</li> <li>Squash commits if requested</li> <li>Merge after approval</li> </ol>"},{"location":"contributing/#reporting-issues","title":"\ud83d\udea8 Reporting Issues","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>Use the bug report template and include:</p> <ul> <li>DevHub version</li> <li>Python version</li> <li>Operating system</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Error messages/logs</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>Use the feature request template and include:</p> <ul> <li>Problem description</li> <li>Proposed solution</li> <li>Alternative solutions considered</li> <li>Implementation ideas</li> </ul>"},{"location":"contributing/#security-issues","title":"Security Issues","text":"<p>For security vulnerabilities, email security@devhub.dev instead of creating a public issue.</p>"},{"location":"contributing/#release-process","title":"\ud83c\udff7\ufe0f Release Process","text":""},{"location":"contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning:</p> <ul> <li><code>MAJOR.MINOR.PATCH</code></li> <li>Major: Breaking changes</li> <li>Minor: New features (backward compatible)</li> <li>Patch: Bug fixes (backward compatible)</li> </ul>"},{"location":"contributing/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update version in <code>src/devhub/__init__.py</code></li> <li>Update <code>CHANGELOG.md</code></li> <li>Create release PR</li> <li>Tag release after merge</li> <li>GitHub Actions handles PyPI deployment</li> </ol>"},{"location":"contributing/#areas-for-contribution","title":"\ud83c\udfaf Areas for Contribution","text":""},{"location":"contributing/#high-priority","title":"High Priority","text":"<ul> <li>Plugin development: New plugins for popular tools</li> <li>Performance optimization: Improve startup time and memory usage</li> <li>Documentation: More examples and tutorials</li> <li>Testing: Increase test coverage</li> </ul>"},{"location":"contributing/#plugin-ideas","title":"Plugin Ideas","text":"<ul> <li>Docker management</li> <li>Database utilities</li> <li>Cloud provider tools</li> <li>CI/CD integrations</li> <li>Code analysis tools</li> </ul>"},{"location":"contributing/#documentation-needs","title":"Documentation Needs","text":"<ul> <li>Video tutorials</li> <li>Plugin development guide</li> <li>Migration guides</li> <li>Best practices</li> </ul>"},{"location":"contributing/#community","title":"\ud83d\udcac Community","text":""},{"location":"contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Discussions: General questions and ideas</li> <li>Discord: Real-time chat</li> <li>Issues: Bug reports and feature requests</li> <li>Email: security@devhub.dev for security issues</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct. Please read it before participating.</p>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li><code>CONTRIBUTORS.md</code> file</li> <li>Release notes</li> <li>Documentation credits</li> <li>Annual contributor highlights</li> </ul>"},{"location":"contributing/#maintainer-guidelines","title":"\ud83d\udee0\ufe0f Maintainer Guidelines","text":""},{"location":"contributing/#for-core-maintainers","title":"For Core Maintainers","text":""},{"location":"contributing/#review-process_1","title":"Review Process","text":"<ol> <li>Check automated tests pass</li> <li>Review code quality and style</li> <li>Verify documentation updates</li> <li>Test locally if needed</li> <li>Provide constructive feedback</li> <li>Approve when ready</li> </ol>"},{"location":"contributing/#release-management","title":"Release Management","text":"<ol> <li>Review changelog</li> <li>Test release candidate</li> <li>Update version numbers</li> <li>Create and push tags</li> <li>Monitor deployment</li> <li>Communicate release</li> </ol>"},{"location":"contributing/#community-management","title":"Community Management","text":"<ol> <li>Respond to issues promptly</li> <li>Welcome new contributors</li> <li>Guide community discussions</li> <li>Maintain project roadmap</li> </ol>"},{"location":"contributing/#checklist-for-contributors","title":"\ud83d\udccb Checklist for Contributors","text":"<p>Before submitting a PR, ensure:</p> <ul> <li>[ ] Code follows style guidelines</li> <li>[ ] Tests pass locally</li> <li>[ ] New features have tests</li> <li>[ ] Documentation is updated</li> <li>[ ] Commit messages follow convention</li> <li>[ ] PR description is clear</li> <li>[ ] Related issues are linked</li> </ul>"},{"location":"contributing/#getting-help","title":"\ud83c\udf89 Getting Help","text":"<p>If you need help contributing:</p> <ol> <li>Check existing documentation</li> <li>Search GitHub issues</li> <li>Ask in GitHub Discussions</li> <li>Join our Discord server</li> <li>Attend community meetings</li> </ol>"},{"location":"contributing/#contact","title":"\ud83d\udcde Contact","text":"<ul> <li>General questions: GitHub Discussions</li> <li>Bug reports: GitHub Issues</li> <li>Security issues: security@devhub.dev</li> <li>Discord: DevHub Community</li> </ul> <p>Thank you for contributing to DevHub! \ud83d\ude80</p>"},{"location":"development/","title":"Development Setup","text":"<p>Complete guide for setting up a DevHub development environment.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: 3.8 or higher</li> <li>Git: Latest version</li> <li>Code Editor: VS Code recommended</li> <li>Terminal: Bash, Zsh, or PowerShell</li> </ul>"},{"location":"development/#quick-setup","title":"Quick Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/username/devhub.git\ncd devhub\n\n# Run setup script\n./setup-dev.sh  # Linux/macOS\n# or\nsetup-dev.bat   # Windows\n</code></pre>"},{"location":"development/#manual-setup","title":"Manual Setup","text":""},{"location":"development/#1-clone-and-navigate","title":"1. Clone and Navigate","text":"<pre><code>git clone https://github.com/username/devhub.git\ncd devhub\n</code></pre>"},{"location":"development/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv env\n\n# Activate (Linux/macOS)\nsource env/bin/activate\n\n# Activate (Windows)\nenv\\Scripts\\activate\n</code></pre>"},{"location":"development/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install DevHub in development mode\npip install -e .\n\n# Install development dependencies\npip install -r requirements-dev.txt\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"development/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code># Check DevHub command\ndevhub --version\n\n# Run tests\npytest\n\n# Check formatting\nblack --check src/\n</code></pre>"},{"location":"development/#development-dependencies","title":"Development Dependencies","text":"<p>The development environment includes:</p> <pre><code># requirements-dev.txt\npytest&gt;=7.0.0\npytest-cov&gt;=4.0.0\npytest-mock&gt;=3.10.0\nblack&gt;=23.0.0\nisort&gt;=5.12.0\nflake8&gt;=6.0.0\nmypy&gt;=1.0.0\nbandit&gt;=1.7.0\npre-commit&gt;=3.0.0\nmkdocs&gt;=1.4.0\nmkdocs-material&gt;=9.0.0\n</code></pre>"},{"location":"development/#ide-configuration","title":"IDE Configuration","text":""},{"location":"development/#vs-code-setup","title":"VS Code Setup","text":"<p>Recommended extensions:</p> <pre><code>{\n  \"recommendations\": [\n    \"ms-python.python\",\n    \"ms-python.black-formatter\",\n    \"ms-python.isort\",\n    \"ms-python.flake8\",\n    \"ms-python.mypy-type-checker\",\n    \"charliermarsh.ruff\",\n    \"redhat.vscode-yaml\",\n    \"yzhang.markdown-all-in-one\"\n  ]\n}\n</code></pre> <p>Settings (<code>.vscode/settings.json</code>):</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"./env/bin/python\",\n  \"python.formatting.provider\": \"black\",\n  \"python.linting.enabled\": true,\n  \"python.linting.flake8Enabled\": true,\n  \"python.linting.mypyEnabled\": true,\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.organizeImports\": true\n  }\n}\n</code></pre>"},{"location":"development/#pycharm-setup","title":"PyCharm Setup","text":"<ol> <li>Open project in PyCharm</li> <li>Set interpreter to <code>./env/bin/python</code></li> <li>Configure code style to match Black</li> <li>Enable type checking with MyPy</li> <li>Set up run configurations for tests</li> </ol>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>devhub/\n\u251c\u2500\u2500 src/devhub/                 # Source code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 cli.py                  # Main CLI entry point\n\u2502   \u251c\u2500\u2500 core/                   # Core functionality\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 config.py\n\u2502   \u2502   \u251c\u2500\u2500 plugin_manager.py\n\u2502   \u2502   \u2514\u2500\u2500 events.py\n\u2502   \u251c\u2500\u2500 plugins/                # Built-in plugins\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 format/\n\u2502   \u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2514\u2500\u2500 security/\n\u2502   \u2514\u2500\u2500 utils/                  # Utility modules\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 exceptions.py\n\u2502       \u251c\u2500\u2500 logger.py\n\u2502       \u2514\u2500\u2500 cli.py\n\u251c\u2500\u2500 tests/                      # Test suite\n\u2502   \u251c\u2500\u2500 unit/                   # Unit tests\n\u2502   \u251c\u2500\u2500 integration/            # Integration tests\n\u2502   \u251c\u2500\u2500 fixtures/               # Test fixtures\n\u2502   \u2514\u2500\u2500 conftest.py            # Pytest configuration\n\u251c\u2500\u2500 docs/                       # Documentation\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 scripts/                    # Development scripts\n\u251c\u2500\u2500 .github/                    # GitHub workflows\n\u251c\u2500\u2500 pyproject.toml             # Project configuration\n\u251c\u2500\u2500 requirements-dev.txt       # Development dependencies\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code>git checkout -b feature/my-new-feature\n</code></pre>"},{"location":"development/#2-make-changes","title":"2. Make Changes","text":"<p>Edit code, following the established patterns and style guidelines.</p>"},{"location":"development/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_format.py\n\n# Run with coverage\npytest --cov=devhub\n</code></pre>"},{"location":"development/#4-format-and-lint","title":"4. Format and Lint","text":"<pre><code># Format code\nblack src/ tests/\nisort src/ tests/\n\n# Check linting\nflake8 src/ tests/\n\n# Type checking\nmypy src/\n</code></pre>"},{"location":"development/#5-commit-changes","title":"5. Commit Changes","text":"<pre><code>git add .\ngit commit -m \"feat: add new feature\"\n</code></pre>"},{"location":"development/#6-push-and-create-pr","title":"6. Push and Create PR","text":"<pre><code>git push origin feature/my-new-feature\n# Create PR on GitHub\n</code></pre>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npytest\n\n# Specific test file\npytest tests/test_format.py\n\n# Specific test method\npytest tests/test_format.py::TestFormatPlugin::test_python_formatting\n\n# With coverage\npytest --cov=devhub --cov-report=html\n\n# Parallel execution\npytest -n auto\n</code></pre>"},{"location":"development/#test-categories","title":"Test Categories","text":"<ul> <li>Unit tests: Test individual functions/methods</li> <li>Integration tests: Test component interactions</li> <li>End-to-end tests: Test complete workflows</li> <li>Performance tests: Test performance characteristics</li> </ul>"},{"location":"development/#writing-tests","title":"Writing Tests","text":"<pre><code># tests/test_my_feature.py\nimport pytest\nfrom devhub.plugins.format import FormatPlugin\n\nclass TestFormatPlugin:\n    def setup_method(self):\n        self.plugin = FormatPlugin()\n        self.plugin.initialize()\n\n    def test_format_python(self):\n        input_code = \"def hello( ):\\n  pass\"\n        result = self.plugin._format_python(input_code, Path(\"test.py\"))\n        assert \"def hello():\" in result\n\n    def teardown_method(self):\n        self.plugin.cleanup()\n</code></pre>"},{"location":"development/#code-quality","title":"Code Quality","text":""},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.3.0\n    hooks:\n      - id: mypy\n</code></pre>"},{"location":"development/#quality-checks","title":"Quality Checks","text":"<pre><code># All quality checks\nmake check\n\n# Individual checks\nmake format      # Black formatting\nmake lint        # Flake8 linting\nmake typecheck   # MyPy type checking\nmake security    # Bandit security check\n</code></pre>"},{"location":"development/#documentation-development","title":"Documentation Development","text":""},{"location":"development/#building-docs","title":"Building Docs","text":"<pre><code># Install docs dependencies\npip install -r docs/requirements.txt\n\n# Serve locally\ncd docs\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre>"},{"location":"development/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Use Markdown format</li> <li>Include code examples</li> <li>Add screenshots for UI features</li> <li>Follow existing style and structure</li> </ul>"},{"location":"development/#debugging","title":"Debugging","text":""},{"location":"development/#using-debugger","title":"Using Debugger","text":"<pre><code># Add breakpoint in code\nimport pdb; pdb.set_trace()\n\n# Or use rich debugger\nfrom rich.console import Console\nconsole = Console()\nconsole.print_exception()\n</code></pre>"},{"location":"development/#vs-code-debugging","title":"VS Code Debugging","text":"<p>Create <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug DevHub\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/src/devhub/cli.py\",\n      \"args\": [\"format\", \"code\", \"--help\"],\n      \"console\": \"integratedTerminal\",\n      \"cwd\": \"${workspaceFolder}\"\n    }\n  ]\n}\n</code></pre>"},{"location":"development/#logging","title":"Logging","text":"<pre><code>from devhub.utils.logger import get_logger\n\nlogger = get_logger(__name__)\nlogger.debug(\"Debug information\")\nlogger.info(\"General information\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error occurred\")\n</code></pre>"},{"location":"development/#performance-profiling","title":"Performance Profiling","text":""},{"location":"development/#cpu-profiling","title":"CPU Profiling","text":"<pre><code># Profile with cProfile\npython -m cProfile -o profile.stats -m devhub format code src/\n\n# Analyze results\npython -c \"import pstats; p = pstats.Stats('profile.stats'); p.sort_stats('cumulative').print_stats(20)\"\n</code></pre>"},{"location":"development/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Install memory profiler\npip install memory-profiler\n\n# Profile memory usage\npython -m memory_profiler devhub/cli.py\n</code></pre>"},{"location":"development/#environment-variables","title":"Environment Variables","text":"<p>Development-specific environment variables:</p> <pre><code># Development mode\nexport DEVHUB_DEV=1\n\n# Debug logging\nexport DEVHUB_LOG_LEVEL=DEBUG\n\n# Custom plugin path\nexport DEVHUB_PLUGIN_PATH=/path/to/dev/plugins\n\n# Test configuration\nexport DEVHUB_CONFIG_PATH=tests/fixtures/config.toml\n</code></pre>"},{"location":"development/#common-issues","title":"Common Issues","text":""},{"location":"development/#import-errors","title":"Import Errors","text":"<pre><code># Ensure DevHub is installed in development mode\npip install -e .\n\n# Check Python path\npython -c \"import sys; print(sys.path)\"\n</code></pre>"},{"location":"development/#test-failures","title":"Test Failures","text":"<pre><code># Clear pytest cache\npytest --cache-clear\n\n# Run specific failing test\npytest -xvs tests/test_format.py::test_python_formatting\n</code></pre>"},{"location":"development/#permission-issues","title":"Permission Issues","text":"<pre><code># Fix file permissions\nchmod +x scripts/setup-dev.sh\n\n# Install in user space\npip install --user -e .\n</code></pre>"},{"location":"development/#makefile-commands","title":"Makefile Commands","text":"<pre><code># Makefile\n.PHONY: install test format lint typecheck clean docs\n\ninstall:\n    pip install -e .\n    pip install -r requirements-dev.txt\n\ntest:\n    pytest\n\nformat:\n    black src/ tests/\n    isort src/ tests/\n\nlint:\n    flake8 src/ tests/\n\ntypecheck:\n    mypy src/\n\nclean:\n    find . -type d -name __pycache__ -delete\n    find . -name \"*.pyc\" -delete\n    rm -rf .pytest_cache/\n    rm -rf htmlcov/\n\ndocs:\n    cd docs &amp;&amp; mkdocs serve\n</code></pre>"},{"location":"development/#docker-development","title":"Docker Development","text":""},{"location":"development/#development-container","title":"Development Container","text":"<pre><code># Dockerfile.dev\nFROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements-dev.txt .\nRUN pip install -r requirements-dev.txt\n\nCOPY . .\nRUN pip install -e .\n\nCMD [\"bash\"]\n</code></pre> <pre><code># Build and run\ndocker build -f Dockerfile.dev -t devhub-dev .\ndocker run -it -v $(pwd):/app devhub-dev\n</code></pre>"},{"location":"development/#release-preparation","title":"Release Preparation","text":""},{"location":"development/#version-bump","title":"Version Bump","text":"<pre><code># Update version in src/devhub/__init__.py\n__version__ = \"1.2.0\"\n\n# Update CHANGELOG.md\n# Create release branch\ngit checkout -b release/1.2.0\n</code></pre>"},{"location":"development/#release-checklist","title":"Release Checklist","text":"<ul> <li>[ ] Update version number</li> <li>[ ] Update changelog</li> <li>[ ] Run all tests</li> <li>[ ] Update documentation</li> <li>[ ] Create release PR</li> <li>[ ] Tag release after merge</li> </ul>"},{"location":"development/#getting-help","title":"Getting Help","text":""},{"location":"development/#resources","title":"Resources","text":"<ul> <li>Documentation: DevHub Docs</li> <li>Examples: GitHub Examples</li> <li>Discussions: GitHub Discussions</li> <li>Discord: DevHub Community</li> </ul>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Check the troubleshooting guide</li> <li>Search existing issues</li> <li>Ask in GitHub Discussions</li> <li>Join Discord for real-time help</li> </ol> <p>Happy coding! \ud83d\ude80</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>DevHub can be installed through multiple methods depending on your preference and use case.</p>"},{"location":"installation/#pypi-installation-recommended","title":"\ud83d\udce6 PyPI Installation (Recommended)","text":"<p>The easiest way to install DevHub is through PyPI:</p> <pre><code># Install DevHub\npip install devhub-cli\n\n# Verify installation\ndevhub --version\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> </ul>"},{"location":"installation/#docker-installation","title":"\ud83d\udc33 Docker Installation","text":"<p>For containerized environments or to avoid dependency conflicts:</p> <pre><code># Pull the official image\ndocker pull devhub/cli\n\n# Run DevHub in a container\ndocker run --rm -v $(pwd):/workspace devhub/cli --help\n\n# Format code using Docker\ndocker run --rm -v $(pwd):/workspace devhub/cli format code --lang python\n</code></pre>"},{"location":"installation/#development-installation","title":"\ud83d\udee0\ufe0f Development Installation","text":"<p>For contributing to DevHub or using the latest features:</p> <pre><code># Clone the repository\ngit clone https://github.com/username/devhub.git\ncd devhub\n\n# Create virtual environment\npython -m venv env\nsource env/bin/activate  # On Windows: env\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n\n# Install development dependencies\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"installation/#system-specific-installation","title":"\ud83d\udd27 System-specific Installation","text":""},{"location":"installation/#macos-homebrew","title":"macOS (Homebrew)","text":"<pre><code># Coming soon\nbrew install devhub-cli\n</code></pre>"},{"location":"installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code># Using pipx (recommended)\nsudo apt install pipx\npipx install devhub-cli\n\n# Or using pip\npip install --user devhub-cli\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<pre><code># Using pip\npip install devhub-cli\n\n# Or using pipx\npip install pipx\npipx install devhub-cli\n</code></pre>"},{"location":"installation/#verify-installation","title":"\u2705 Verify Installation","text":"<p>After installation, verify that DevHub is working correctly:</p> <pre><code># Check version\ndevhub --version\n\n# List available plugins\ndevhub --help\n\n# Test code formatting\necho \"print('hello')\" | devhub format code --lang python\n</code></pre>"},{"location":"installation/#updating-devhub","title":"\ud83d\udd04 Updating DevHub","text":"<p>To update to the latest version:</p> <pre><code># PyPI\npip install --upgrade devhub-cli\n\n# Docker\ndocker pull devhub/cli:latest\n\n# Development\ngit pull origin main\npip install -e .\n</code></pre>"},{"location":"installation/#uninstallation","title":"\ud83d\uddd1\ufe0f Uninstallation","text":"<p>To remove DevHub:</p> <pre><code># PyPI installation\npip uninstall devhub-cli\n\n# Docker\ndocker rmi devhub/cli\n\n# Development installation\npip uninstall devhub-cli\nrm -rf devhub/  # Remove cloned repository\n</code></pre>"},{"location":"installation/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<p>Command not found after installation <pre><code># Check if pip bin directory is in PATH\npip show devhub-cli\n\n# On macOS/Linux, add to ~/.bashrc or ~/.zshrc:\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre></p> <p>Permission denied on Linux/macOS <pre><code># Use --user flag\npip install --user devhub-cli\n\n# Or use pipx\npipx install devhub-cli\n</code></pre></p> <p>Docker permission issues <pre><code># Add user to docker group (Linux)\nsudo usermod -aG docker $USER\n# Then logout and login again\n</code></pre></p> <p>For more help, visit our GitHub Issues or Discussions.</p>"},{"location":"quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with DevHub in minutes! This guide covers the essential commands and workflows you'll use daily.</p>"},{"location":"quick-start/#first-steps","title":"\ud83d\ude80 First Steps","text":"<p>After installation, verify DevHub is working:</p> <pre><code># Check version and available commands\ndevhub --version\ndevhub --help\n</code></pre>"},{"location":"quick-start/#code-formatting","title":"\ud83c\udfa8 Code Formatting","text":"<p>DevHub supports multiple programming languages with automatic detection:</p> <pre><code># Format a single file\ndevhub format code src/main.py\n\n# Format an entire directory\ndevhub format code --lang python src/\n\n# Format multiple languages at once\ndevhub format code --lang python,javascript src/\n\n# Check what would be formatted (dry run)\ndevhub format code --dry-run src/\n</code></pre>"},{"location":"quick-start/#supported-languages","title":"Supported Languages","text":"<ul> <li>Python: Uses Black + isort</li> <li>JavaScript/TypeScript: Uses Prettier</li> <li>Go: Uses gofmt</li> <li>Rust: Uses rustfmt</li> <li>JSON/YAML: Built-in formatters</li> </ul>"},{"location":"quick-start/#api-testing","title":"\ud83c\udf10 API Testing","text":"<p>Test and benchmark APIs with beautiful output:</p> <pre><code># Simple GET request\ndevhub api test --url https://api.github.com/users/octocat\n\n# Quick Start Guide\n\nGet up and running with DevHub in minutes! This guide covers the essential commands and workflows you'll use daily.\n\n## \ud83d\ude80 First Steps\n\nAfter [installation](installation.md), verify DevHub is working:\n\n```bash\n# Check version and available commands\ndevhub --version\ndevhub --help\n\n# List available plugins\ndevhub plugin list\n</code></pre>"},{"location":"quick-start/#code-formatting_1","title":"\ud83c\udfa8 Code Formatting","text":"<p>DevHub supports multiple programming languages with intelligent formatting:</p> <pre><code># Format a single Python file\ndevhub format code main.py --lang python\n\n# Format all Python files in a directory\ndevhub format code ./src --lang python\n\n# Check what would be formatted (dry run)\ndevhub format code main.py --lang python --diff\n\n# Check if files need formatting (CI/CD friendly)\ndevhub format check ./src --lang python\n\n# Format with custom line length\ndevhub format code main.py --lang python --line-length 100\n</code></pre>"},{"location":"quick-start/#supported-languages_1","title":"Supported Languages","text":"<ul> <li>Python: Uses Black + isort for PEP 8 compliance</li> <li>JavaScript/TypeScript: Uses Prettier for consistent style</li> <li>Go: Uses gofmt for Go standard formatting</li> <li>Rust: Uses rustfmt for Rust style guide</li> <li>JSON: Built-in formatter with proper indentation</li> <li>YAML: PyYAML formatter for clean YAML files</li> </ul>"},{"location":"quick-start/#format-examples","title":"Format Examples","text":"<pre><code># Create and format a messy Python file\necho 'def hello(name):print(f\"Hello {name}!\")' &gt; test.py\ndevhub format code test.py --lang python\ncat test.py  # See the beautifully formatted result\n\n# Format JSON data\necho '{\"name\":\"John\",\"age\":30}' &gt; data.json\ndevhub format code data.json --lang json\ncat data.json  # Pretty printed JSON\n\n# Format YAML configuration\ndevhub format code config.yml --lang yaml\n</code></pre>"},{"location":"quick-start/#api-testing_1","title":"\ud83c\udf10 API Testing","text":"<p>Test and benchmark APIs with beautiful, informative output:</p> <pre><code># Simple GET request\ndevhub api test --url https://api.github.com/users/octocat\n\n# POST with JSON data\ndevhub api test --url https://httpbin.org/post \\\n  --method POST \\\n  --json-data '{\"name\": \"John\", \"age\": 30}'\n\n# Add custom headers (multiple headers supported)\ndevhub api test --url https://httpbin.org/headers \\\n  --headers \"Authorization:Bearer token123\" \\\n  --headers \"Content-Type:application/json\"\n\n# Send form data\ndevhub api test --url https://httpbin.org/post \\\n  --method POST \\\n  --data \"name=John&amp;age=30\"\n\n# Check response headers only\ndevhub api headers https://github.com\n\n# Benchmark an endpoint\ndevhub api benchmark --url https://httpbin.org/get \\\n  --requests 50 \\\n  --concurrency 5\n\n# Test with timeout and verbose output\ndevhub api test --url https://slow-api.com/endpoint \\\n  --timeout 60 \\\n  --verbose\n</code></pre>"},{"location":"quick-start/#api-testing-features","title":"API Testing Features","text":"<ul> <li>Beautiful Response Formatting: JSON syntax highlighting and structured output</li> <li>Performance Metrics: Response times, status codes, and benchmarking</li> <li>Header Inspection: Detailed request and response header analysis</li> <li>Error Handling: Clear error messages and debugging information</li> <li>Timeout Control: Configurable request timeouts</li> <li>Concurrent Testing: Load testing with concurrent requests</li> </ul>"},{"location":"quick-start/#plugin-management","title":"\ud83d\udd27 Plugin Management","text":"<p>Manage DevHub's modular plugin system:</p> <pre><code># List all available plugins\ndevhub plugin list\n\n# Get detailed information about a plugin\ndevhub plugin info format\ndevhub plugin info api\n</code></pre> <p>Current available plugins: - format: Multi-language code formatting - api: HTTP API testing and benchmarking</p>"},{"location":"quick-start/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>Configure DevHub for your preferences:</p> <pre><code># Use verbose output globally\ndevhub --verbose api test --url https://httpbin.org/get\n\n# Use custom configuration file\ndevhub --config ./my-config.yml format code main.py\n\n# Create a configuration file\nmkdir -p ~/.config/devhub\ncat &gt; ~/.config/devhub/config.yml &lt;&lt; EOF\nverbose: false\nformat:\n  line_length: 88\n  check_only: false\napi:\n  timeout: 30\n  verbose: false\nEOF\n</code></pre>"},{"location":"quick-start/#common-workflows","title":"\ud83d\udccb Common Workflows","text":""},{"location":"quick-start/#daily-development-workflow","title":"Daily Development Workflow","text":"<pre><code># 1. Format your code before committing\ndevhub format code ./src --lang python\n\n# 2. Test your local API endpoints\ndevhub api test --url http://localhost:8000/api/health\n\n# 3. Check external API dependencies\ndevhub api test --url https://api.github.com/rate_limit\n\n# 4. Verify code formatting in CI/CD\ndevhub format check ./src --lang python\n</code></pre>"},{"location":"quick-start/#api-development-testing","title":"API Development &amp; Testing","text":"<pre><code># Test API during development\ndevhub api test --url http://localhost:3000/api/users --method GET\n\n# Test authentication\ndevhub api test --url http://localhost:3000/api/users \\\n  --method POST \\\n  --headers \"Authorization:Bearer $API_TOKEN\" \\\n  --json-data '{\"name\": \"New User\", \"email\": \"user@example.com\"}'\n\n# Load test your API\ndevhub api benchmark --url http://localhost:3000/api/health \\\n  --requests 100 \\\n  --concurrency 10\n\n# Check API response headers\ndevhub api headers https://api.your-service.com/v1/status\n</code></pre>"},{"location":"quick-start/#code-quality-assurance","title":"Code Quality Assurance","text":"<pre><code># Pre-commit formatting check\ndevhub format check ./src --lang python\nif [ $? -ne 0 ]; then\n    echo \"\u274c Code formatting issues found\"\n    echo \"\ud83d\udd27 Run: devhub format code ./src --lang python\"\n    exit 1\nfi\n\n# Format multiple language types\ndevhub format code ./src --lang python\ndevhub format code ./config --lang yaml  \ndevhub format code ./data --lang json\ndevhub format code ./frontend --lang javascript\n</code></pre>"},{"location":"quick-start/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># GitHub Actions example\n- name: Check code formatting\n  run: devhub format check ./src --lang python\n\n- name: Test API endpoints\n  run: devhub api test --url ${{ secrets.STAGING_API_URL }}/health\n\n# Pre-commit hook example\n#!/bin/bash\ndevhub format check ./src --lang python\nif [ $? -ne 0 ]; then\n    echo \"Code formatting check failed\"\n    echo \"Run: devhub format code ./src --lang python\"\n    exit 1\nfi\n</code></pre>"},{"location":"quick-start/#tips-and-tricks","title":"\ud83d\udca1 Tips and Tricks","text":""},{"location":"quick-start/#performance-tips","title":"Performance Tips","text":"<ul> <li>Use <code>--diff</code> to preview formatting changes before applying</li> <li>Use <code>--check</code> for CI/CD to verify formatting without modifying files</li> <li>Format specific file types with <code>--lang</code> to avoid unnecessary processing</li> <li>Use <code>--verbose</code> for debugging API issues</li> </ul>"},{"location":"quick-start/#command-shortcuts","title":"Command Shortcuts","text":"<pre><code># Most commands support short aliases\ndevhub -h          # --help\ndevhub -v          # --verbose\ndevhub format -l   # --lang\ndevhub api -m      # --method\ndevhub api -u      # --url\n</code></pre>"},{"location":"quick-start/#integration-examples","title":"Integration Examples","text":"<p>VS Code Settings: <pre><code>{\n  \"python.formatting.provider\": \"none\",\n  \"python.formatting.blackPath\": \"devhub format code --lang python\"\n}\n</code></pre></p> <p>Makefile Integration: <pre><code>format:\n    devhub format code ./src --lang python\n\nformat-check:\n    devhub format check ./src --lang python\n\ntest-api:\n    devhub api test --url http://localhost:8000/health\n</code></pre></p> <p>Package.json Scripts: <pre><code>{\n  \"scripts\": {\n    \"format\": \"devhub format code ./src --lang javascript\",\n    \"format:check\": \"devhub format check ./src --lang javascript\",\n    \"test:api\": \"devhub api test --url http://localhost:3000/health\"\n  }\n}\n</code></pre></p>"},{"location":"quick-start/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"quick-start/#common-issues","title":"Common Issues","text":"<p>Command not found: <pre><code># Check if devhub is in PATH\nwhich devhub\necho $PATH\n\n# If using pipx\npipx ensurepath\nsource ~/.bashrc  # or ~/.zshrc\n</code></pre></p> <p>Formatting tool not found: <pre><code># Install required formatters\npip install black isort          # Python\nnpm install -g prettier          # JavaScript/TypeScript\n# Install Go from https://golang.org\n# Install Rust from https://rustup.rs\n</code></pre></p> <p>API connection issues: <pre><code># Use verbose mode for debugging\ndevhub api test --url https://example.com --verbose\n\n# Test with longer timeout\ndevhub api test --url https://slow-api.com --timeout 60\n</code></pre></p> <p>Uninstalling DevHub: <pre><code># pipx uninstall (recommended)\npipx uninstall devhub-tools\n\n# pip uninstall\npip uninstall devhub-tools\n\n# Clean up configuration (optional)\nrm -rf ~/.config/devhub\n</code></pre></p>"},{"location":"quick-start/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<pre><code># Get help for any command\ndevhub --help\ndevhub format --help\ndevhub api --help\ndevhub format code --help\ndevhub api test --help\n\n# Get plugin information\ndevhub plugin list\ndevhub plugin info format\n</code></pre>"},{"location":"quick-start/#community-support","title":"Community Support","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udcac GitHub Discussions</li> <li>\ud83d\udc1b GitHub Issues</li> <li>\ud83d\udd27 Installation Guide</li> </ul>"},{"location":"quick-start/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Explore advanced formatting options in the User Guide</li> <li>Learn about API testing features in the API Guide</li> <li>Check out Plugin Development to extend DevHub</li> <li>See Configuration Guide for customization options</li> </ul> <p>Happy coding with DevHub! \ud83c\udf89</p>"},{"location":"quick-start/#add-custom-headers","title":"Add custom headers","text":"<p>devhub api test --url https://api.example.com \\   --header \"Authorization: Bearer token123\" \\   --header \"Content-Type: application/json\"</p>"},{"location":"quick-start/#benchmark-an-endpoint","title":"Benchmark an endpoint","text":"<p>devhub api benchmark --url https://api.github.com \\   --requests 100 \\   --concurrency 10 <pre><code>## \ud83d\udd10 Security Tools\n\nGenerate secure passwords and hashes:\n\n```bash\n# Generate a strong password\ndevhub gen password --length 20 --symbols\n\n# Generate multiple passwords\ndevhub gen password --count 5\n\n# Hash a string\ndevhub security hash --text \"hello world\" --algorithm sha256\n\n# Generate API keys\ndevhub gen apikey --length 32\n</code></pre></p>"},{"location":"quick-start/#git-workflow","title":"\ud83d\udd04 Git Workflow","text":"<p>Automate common Git operations:</p> <pre><code># Clean up merged branches\ndevhub git clean-branches --merged\n\n# Analyze commit history\ndevhub git analyze --since \"1 month ago\"\n\n# Generate commit message\ndevhub git suggest-commit\n\n# Check repository health\ndevhub git health-check\n</code></pre>"},{"location":"quick-start/#data-conversion","title":"\ud83d\udcca Data Conversion","text":"<p>Convert between data formats easily:</p> <pre><code># JSON to CSV\ndevhub convert json2csv data.json --output data.csv\n\n# CSV to JSON\ndevhub convert csv2json data.csv --output data.json\n\n# YAML to JSON\ndevhub convert yaml2json config.yaml\n\n# Pretty print JSON\ndevhub convert json data.json --pretty\n</code></pre>"},{"location":"quick-start/#system-monitoring","title":"\ud83d\udda5\ufe0f System Monitoring","text":"<p>Monitor system resources and processes:</p> <pre><code># Quick system overview\ndevhub monitor system\n\n# Continuous monitoring\ndevhub monitor system --interval 5 --duration 60\n\n# Monitor specific processes\ndevhub monitor process --name python\n\n# Check disk usage\ndevhub monitor disk --path /home/user\n</code></pre>"},{"location":"quick-start/#configuration_1","title":"\u2699\ufe0f Configuration","text":"<p>Configure DevHub for your preferences:</p> <pre><code># Initialize configuration\ndevhub config init\n\n# View current configuration\ndevhub config show\n\n# Set configuration values\ndevhub config set format.python.line_length 88\ndevhub config set api.default_timeout 30\n\n# Reset to defaults\ndevhub config reset\n</code></pre>"},{"location":"quick-start/#plugin-management_1","title":"\ud83d\udd27 Plugin Management","text":"<p>Manage DevHub plugins:</p> <pre><code># List available plugins\ndevhub plugin list\n\n# Enable/disable plugins\ndevhub plugin enable format\ndevhub plugin disable git\n\n# Plugin information\ndevhub plugin info format\n\n# Update plugins\ndevhub plugin update\n</code></pre>"},{"location":"quick-start/#common-workflows_1","title":"\ud83d\udccb Common Workflows","text":""},{"location":"quick-start/#daily-development-workflow_1","title":"Daily Development Workflow","text":"<pre><code># Format code before committing\ndevhub format code src/\n\n# Test APIs during development\ndevhub api test --url http://localhost:3000/api/health\n\n# Generate secure tokens\ndevhub gen password --length 16\n\n# Clean up Git branches weekly\ndevhub git clean-branches --merged\n</code></pre>"},{"location":"quick-start/#cicd-integration_1","title":"CI/CD Integration","text":"<pre><code># In your CI pipeline\ndevhub format code --check src/  # Fail if not formatted\ndevhub api test --url $STAGING_URL  # Test staging\ndevhub security scan src/  # Security check\n</code></pre>"},{"location":"quick-start/#data-processing","title":"Data Processing","text":"<pre><code># Convert and process data files\ndevhub convert csv2json raw_data.csv | \\\n  jq '.[] | select(.status == \"active\")' | \\\n  devhub convert json2csv --output filtered.csv\n</code></pre>"},{"location":"quick-start/#tips-and-tricks_1","title":"\ud83d\udca1 Tips and Tricks","text":""},{"location":"quick-start/#performance","title":"Performance","text":"<ul> <li>Use <code>--dry-run</code> to preview changes before applying</li> <li>Format specific file types: <code>devhub format code --lang python</code></li> <li>Use <code>--quiet</code> flag for CI/CD scripts</li> </ul>"},{"location":"quick-start/#shortcuts","title":"Shortcuts","text":"<ul> <li>Most commands have short aliases: <code>devhub fmt</code> = <code>devhub format</code></li> <li>Use shell completion: <code>devhub completion bash &gt;&gt; ~/.bashrc</code></li> <li>Set environment variables: <code>export DEVHUB_CONFIG_PATH=~/.devhub</code></li> </ul>"},{"location":"quick-start/#integration","title":"Integration","text":"<ul> <li>VS Code: Install the DevHub extension</li> <li>Git hooks: Add to pre-commit hooks</li> <li>Make/npm scripts: Add common commands to build scripts</li> </ul>"},{"location":"quick-start/#getting-help_1","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Use <code>--help</code> on any command: <code>devhub format --help</code></li> <li>Check the User Guide for detailed documentation</li> <li>Visit GitHub Discussions for community support</li> <li>Report issues on GitHub Issues</li> </ul>"},{"location":"quick-start/#next-steps_1","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Explore the User Guide for detailed feature documentation</li> <li>Learn about Plugin Development to extend DevHub</li> <li>Join our Community to stay updated</li> </ul> <p>Happy coding with DevHub! \ud83c\udf89</p>"},{"location":"testing/","title":"Testing","text":"<p>Comprehensive testing guide for DevHub development and contribution.</p>"},{"location":"testing/#testing-philosophy","title":"Testing Philosophy","text":"<p>DevHub follows a comprehensive testing strategy:</p> <ul> <li>Unit Tests: Test individual functions and methods</li> <li>Integration Tests: Test component interactions</li> <li>End-to-End Tests: Test complete user workflows</li> <li>Performance Tests: Ensure acceptable performance</li> <li>Security Tests: Validate security measures</li> </ul>"},{"location":"testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                       # Unit tests\n\u2502   \u251c\u2500\u2500 test_config.py\n\u2502   \u251c\u2500\u2500 test_plugin_manager.py\n\u2502   \u2514\u2500\u2500 plugins/\n\u2502       \u251c\u2500\u2500 test_format.py\n\u2502       \u251c\u2500\u2500 test_api.py\n\u2502       \u2514\u2500\u2500 test_security.py\n\u251c\u2500\u2500 integration/                # Integration tests\n\u2502   \u251c\u2500\u2500 test_cli_integration.py\n\u2502   \u251c\u2500\u2500 test_plugin_loading.py\n\u2502   \u2514\u2500\u2500 test_config_integration.py\n\u251c\u2500\u2500 e2e/                       # End-to-end tests\n\u2502   \u251c\u2500\u2500 test_workflows.py\n\u2502   \u2514\u2500\u2500 test_real_world_usage.py\n\u251c\u2500\u2500 performance/               # Performance tests\n\u2502   \u251c\u2500\u2500 test_startup_time.py\n\u2502   \u2514\u2500\u2500 test_memory_usage.py\n\u251c\u2500\u2500 security/                  # Security tests\n\u2502   \u251c\u2500\u2500 test_input_validation.py\n\u2502   \u2514\u2500\u2500 test_secret_handling.py\n\u251c\u2500\u2500 fixtures/                  # Test data and fixtures\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 sample_files/\n\u2502   \u2514\u2500\u2500 mock_data/\n\u2514\u2500\u2500 conftest.py               # Pytest configuration\n</code></pre>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/test_format.py\n\n# Run specific test method\npytest tests/unit/test_format.py::TestFormatPlugin::test_python_formatting\n\n# Run tests matching pattern\npytest -k \"test_format\"\n\n# Run tests with verbose output\npytest -v\n\n# Run tests and stop on first failure\npytest -x\n</code></pre>"},{"location":"testing/#test-categories","title":"Test Categories","text":"<pre><code># Unit tests only\npytest tests/unit/\n\n# Integration tests only\npytest tests/integration/\n\n# End-to-end tests only\npytest tests/e2e/\n\n# Fast tests (skip slow tests)\npytest -m \"not slow\"\n\n# All tests including slow ones\npytest -m \"\"\n</code></pre>"},{"location":"testing/#parallel-execution","title":"Parallel Execution","text":"<pre><code># Install pytest-xdist\npip install pytest-xdist\n\n# Run tests in parallel\npytest -n auto\n\n# Run with specific number of workers\npytest -n 4\n</code></pre>"},{"location":"testing/#test-coverage","title":"Test Coverage","text":""},{"location":"testing/#measuring-coverage","title":"Measuring Coverage","text":"<pre><code># Run tests with coverage\npytest --cov=devhub\n\n# Generate HTML coverage report\npytest --cov=devhub --cov-report=html\n\n# Open coverage report\nopen htmlcov/index.html\n\n# Generate XML coverage report (for CI)\npytest --cov=devhub --cov-report=xml\n</code></pre>"},{"location":"testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code># .coveragerc\n[run]\nsource = src/devhub\nomit = \n    */tests/*\n    */test_*\n    setup.py\n    venv/*\n    env/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    if self.debug:\n    if settings.DEBUG\n    raise AssertionError\n    raise NotImplementedError\n    if 0:\n    if __name__ == .__main__.:\n\n[html]\ndirectory = htmlcov\n</code></pre>"},{"location":"testing/#coverage-goals","title":"Coverage Goals","text":"<ul> <li>Overall: 90%+ coverage</li> <li>Core modules: 95%+ coverage</li> <li>New features: 100% coverage</li> <li>Bug fixes: Must add tests</li> </ul>"},{"location":"testing/#writing-tests","title":"Writing Tests","text":""},{"location":"testing/#unit-test-example","title":"Unit Test Example","text":"<pre><code># tests/unit/test_format.py\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom pathlib import Path\nimport tempfile\n\nfrom devhub.plugins.format import FormatPlugin\nfrom devhub.utils.exceptions import FormatError\n\nclass TestFormatPlugin(unittest.TestCase):\n    def setUp(self):\n        \"\"\"Set up test fixtures\"\"\"\n        self.plugin = FormatPlugin()\n        self.plugin.initialize()\n\n        # Create temporary directory for test files\n        self.temp_dir = tempfile.mkdtemp()\n        self.test_file = Path(self.temp_dir) / \"test.py\"\n\n    def tearDown(self):\n        \"\"\"Clean up after tests\"\"\"\n        self.plugin.cleanup()\n        # Clean up temporary files\n        import shutil\n        shutil.rmtree(self.temp_dir)\n\n    def test_format_python_code(self):\n        \"\"\"Test Python code formatting\"\"\"\n        # Input code with formatting issues\n        input_code = \"\"\"\ndef hello( name ):\n    print( f\"Hello {name}!\" )\n\"\"\"\n\n        # Expected formatted output\n        expected = '''def hello(name):\n    print(f\"Hello {name}!\")\n'''\n\n        # Test formatting\n        result = self.plugin._format_python(input_code, self.test_file)\n        self.assertEqual(result.strip(), expected.strip())\n\n    def test_format_python_syntax_error(self):\n        \"\"\"Test handling of syntax errors\"\"\"\n        invalid_code = \"def hello(\\n    print('incomplete\"\n\n        with self.assertRaises(FormatError):\n            self.plugin._format_python(invalid_code, self.test_file)\n\n    @patch('devhub.plugins.format.subprocess.run')\n    def test_format_with_external_tool(self, mock_run):\n        \"\"\"Test formatting with external tool\"\"\"\n        # Mock successful subprocess call\n        mock_run.return_value = MagicMock(\n            returncode=0,\n            stdout=\"formatted code\",\n            stderr=\"\"\n        )\n\n        result = self.plugin._run_external_formatter(\"test.py\", \"black\")\n\n        # Verify subprocess was called correctly\n        mock_run.assert_called_once()\n        self.assertEqual(result, \"formatted code\")\n\n    def test_config_integration(self):\n        \"\"\"Test configuration integration\"\"\"\n        # Set custom configuration\n        config = {\n            \"line_length\": 100,\n            \"skip_string_normalization\": True\n        }\n        self.plugin.update_config(config)\n\n        # Verify configuration is applied\n        self.assertEqual(self.plugin.line_length, 100)\n        self.assertTrue(self.plugin.skip_string_normalization)\n</code></pre>"},{"location":"testing/#integration-test-example","title":"Integration Test Example","text":"<pre><code># tests/integration/test_cli_integration.py\nimport pytest\nfrom click.testing import CliRunner\nfrom pathlib import Path\nimport tempfile\nimport os\n\nfrom devhub.cli import cli\n\nclass TestCLIIntegration:\n    def setup_method(self):\n        \"\"\"Set up test environment\"\"\"\n        self.runner = CliRunner()\n        self.temp_dir = tempfile.mkdtemp()\n\n    def teardown_method(self):\n        \"\"\"Clean up test environment\"\"\"\n        import shutil\n        shutil.rmtree(self.temp_dir)\n\n    def test_format_command_integration(self):\n        \"\"\"Test format command end-to-end\"\"\"\n        # Create test file\n        test_file = Path(self.temp_dir) / \"test.py\"\n        test_file.write_text(\"def hello( name ):\\n    print(f'Hello {name}!')\")\n\n        # Run format command\n        result = self.runner.invoke(cli, [\n            'format', 'code', str(test_file), '--lang', 'python'\n        ])\n\n        # Check command succeeded\n        assert result.exit_code == 0\n\n        # Check file was formatted\n        formatted_content = test_file.read_text()\n        assert \"def hello(name):\" in formatted_content\n\n    def test_config_command_integration(self):\n        \"\"\"Test configuration commands\"\"\"\n        with self.runner.isolated_filesystem():\n            # Initialize configuration\n            result = self.runner.invoke(cli, ['config', 'init'])\n            assert result.exit_code == 0\n\n            # Set configuration value\n            result = self.runner.invoke(cli, [\n                'config', 'set', 'format.line_length', '100'\n            ])\n            assert result.exit_code == 0\n\n            # Get configuration value\n            result = self.runner.invoke(cli, [\n                'config', 'get', 'format.line_length'\n            ])\n            assert result.exit_code == 0\n            assert '100' in result.output\n\n    def test_plugin_loading_integration(self):\n        \"\"\"Test plugin loading and command registration\"\"\"\n        # List available plugins\n        result = self.runner.invoke(cli, ['plugin', 'list'])\n        assert result.exit_code == 0\n        assert 'format' in result.output\n\n        # Get plugin info\n        result = self.runner.invoke(cli, ['plugin', 'info', 'format'])\n        assert result.exit_code == 0\n        assert 'Code formatting plugin' in result.output\n</code></pre>"},{"location":"testing/#end-to-end-test-example","title":"End-to-End Test Example","text":"<pre><code># tests/e2e/test_workflows.py\nimport pytest\nfrom click.testing import CliRunner\nfrom pathlib import Path\nimport tempfile\nimport json\n\nfrom devhub.cli import cli\n\nclass TestRealWorldWorkflows:\n    def setup_method(self):\n        self.runner = CliRunner()\n        self.project_dir = tempfile.mkdtemp()\n\n    def teardown_method(self):\n        import shutil\n        shutil.rmtree(self.project_dir)\n\n    def test_python_project_workflow(self):\n        \"\"\"Test complete Python project formatting workflow\"\"\"\n        project_path = Path(self.project_dir)\n\n        # Create Python project structure\n        src_dir = project_path / \"src\"\n        src_dir.mkdir()\n\n        # Create Python files with formatting issues\n        (src_dir / \"main.py\").write_text(\"\"\"\nimport os,sys\ndef main( ):\n    print( \"Hello World!\" )\nif __name__==\"__main__\":\n    main()\n\"\"\")\n\n        (src_dir / \"utils.py\").write_text(\"\"\"\ndef helper( x,y ):\n    return x+y\nclass MyClass:\n    def __init__( self,value ):\n        self.value=value\n\"\"\")\n\n        # Create DevHub configuration\n        config = {\n            \"format\": {\n                \"line_length\": 88,\n                \"python\": {\n                    \"enabled\": True,\n                    \"isort_enabled\": True\n                }\n            }\n        }\n        (project_path / \".devhub.toml\").write_text(\n            f\"[format]\\nline_length = 88\\n[format.python]\\nenabled = true\"\n        )\n\n        # Run formatting on entire project\n        result = self.runner.invoke(cli, [\n            'format', 'code', \n            '--lang', 'python',\n            '--recursive',\n            str(src_dir)\n        ], cwd=str(project_path))\n\n        # Check command succeeded\n        assert result.exit_code == 0\n\n        # Verify files were formatted\n        main_content = (src_dir / \"main.py\").read_text()\n        assert \"import os\" in main_content\n        assert \"import sys\" in main_content\n        assert \"def main():\" in main_content\n        assert 'if __name__ == \"__main__\":' in main_content\n\n        utils_content = (src_dir / \"utils.py\").read_text()\n        assert \"def helper(x, y):\" in utils_content\n        assert \"def __init__(self, value):\" in utils_content\n\n    def test_api_testing_workflow(self):\n        \"\"\"Test API testing workflow\"\"\"\n        # Test API endpoint\n        result = self.runner.invoke(cli, [\n            'api', 'test',\n            '--url', 'https://httpbin.org/json',\n            '--format', 'json'\n        ])\n\n        # Check command succeeded\n        assert result.exit_code == 0\n        assert 'slideshow' in result.output  # httpbin.org/json content\n\n        # Test with custom headers\n        result = self.runner.invoke(cli, [\n            'api', 'test',\n            '--url', 'https://httpbin.org/headers',\n            '--header', 'Custom-Header: test-value',\n            '--format', 'json'\n        ])\n\n        assert result.exit_code == 0\n        assert 'Custom-Header' in result.output\n</code></pre>"},{"location":"testing/#performance-test-example","title":"Performance Test Example","text":"<pre><code># tests/performance/test_startup_time.py\nimport time\nimport subprocess\nimport pytest\n\nclass TestPerformance:\n    def test_startup_time(self):\n        \"\"\"Test DevHub startup time\"\"\"\n        start_time = time.time()\n\n        result = subprocess.run([\n            'devhub', '--version'\n        ], capture_output=True, text=True)\n\n        end_time = time.time()\n        startup_time = end_time - start_time\n\n        # DevHub should start in less than 2 seconds\n        assert startup_time &lt; 2.0\n        assert result.returncode == 0\n\n    @pytest.mark.slow\n    def test_large_file_formatting(self):\n        \"\"\"Test formatting performance on large files\"\"\"\n        # Create large Python file\n        large_code = \"def function_{}():\\n    pass\\n\\n\" * 1000\n\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n            f.write(large_code)\n            f.flush()\n\n            start_time = time.time()\n\n            result = subprocess.run([\n                'devhub', 'format', 'code', f.name\n            ], capture_output=True)\n\n            end_time = time.time()\n            format_time = end_time - start_time\n\n            # Should format large file in reasonable time\n            assert format_time &lt; 10.0\n            assert result.returncode == 0\n\n            os.unlink(f.name)\n</code></pre>"},{"location":"testing/#test-fixtures-and-utilities","title":"Test Fixtures and Utilities","text":""},{"location":"testing/#fixtures","title":"Fixtures","text":"<pre><code># tests/conftest.py\nimport pytest\nimport tempfile\nfrom pathlib import Path\nfrom devhub.core.plugin_manager import PluginManager\nfrom devhub.core.config import ConfigManager\n\n@pytest.fixture\ndef temp_dir():\n    \"\"\"Provide temporary directory for tests\"\"\"\n    temp_path = tempfile.mkdtemp()\n    yield Path(temp_path)\n    # Cleanup\n    import shutil\n    shutil.rmtree(temp_path)\n\n@pytest.fixture\ndef sample_python_file(temp_dir):\n    \"\"\"Provide sample Python file for testing\"\"\"\n    file_path = temp_dir / \"sample.py\"\n    file_path.write_text(\"\"\"\ndef hello( name ):\n    print( f\"Hello {name}!\" )\n\"\"\")\n    return file_path\n\n@pytest.fixture\ndef plugin_manager():\n    \"\"\"Provide configured plugin manager\"\"\"\n    manager = PluginManager()\n    manager.initialize()\n    yield manager\n    manager.cleanup()\n\n@pytest.fixture\ndef mock_config():\n    \"\"\"Provide mock configuration\"\"\"\n    return {\n        \"format\": {\n            \"line_length\": 88,\n            \"python\": {\n                \"enabled\": True,\n                \"formatter\": \"black\"\n            }\n        },\n        \"api\": {\n            \"default_timeout\": 30\n        }\n    }\n</code></pre>"},{"location":"testing/#test-utilities","title":"Test Utilities","text":"<pre><code># tests/utils.py\nimport json\nimport yaml\nfrom pathlib import Path\n\ndef create_test_file(path: Path, content: str, file_type: str = \"txt\"):\n    \"\"\"Create test file with specified content\"\"\"\n    if file_type == \"json\":\n        path.write_text(json.dumps(json.loads(content), indent=2))\n    elif file_type == \"yaml\":\n        path.write_text(yaml.dump(yaml.safe_load(content)))\n    else:\n        path.write_text(content)\n    return path\n\ndef assert_file_formatted(file_path: Path, expected_patterns: list):\n    \"\"\"Assert that file contains expected formatting patterns\"\"\"\n    content = file_path.read_text()\n    for pattern in expected_patterns:\n        assert pattern in content, f\"Pattern '{pattern}' not found in {file_path}\"\n\ndef run_cli_command(command_args: list, cwd: Path = None):\n    \"\"\"Run CLI command and return result\"\"\"\n    from click.testing import CliRunner\n    from devhub.cli import cli\n\n    runner = CliRunner()\n    return runner.invoke(cli, command_args, cwd=str(cwd) if cwd else None)\n</code></pre>"},{"location":"testing/#mocking-and-stubbing","title":"Mocking and Stubbing","text":""},{"location":"testing/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<pre><code>import unittest.mock as mock\nfrom devhub.plugins.api import APIPlugin\n\nclass TestAPIPlugin:\n    @mock.patch('requests.get')\n    def test_api_request(self, mock_get):\n        \"\"\"Test API request with mocked response\"\"\"\n        # Setup mock response\n        mock_response = mock.MagicMock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\"result\": \"success\"}\n        mock_get.return_value = mock_response\n\n        # Test API call\n        plugin = APIPlugin()\n        result = plugin.make_request(\"https://api.example.com/test\")\n\n        # Verify mock was called correctly\n        mock_get.assert_called_once_with(\"https://api.example.com/test\")\n        assert result[\"result\"] == \"success\"\n\n    @mock.patch('subprocess.run')\n    def test_external_tool_execution(self, mock_run):\n        \"\"\"Test external tool execution\"\"\"\n        mock_run.return_value = mock.MagicMock(\n            returncode=0,\n            stdout=\"tool output\",\n            stderr=\"\"\n        )\n\n        from devhub.plugins.format import FormatPlugin\n        plugin = FormatPlugin()\n        result = plugin._run_external_tool([\"black\", \"file.py\"])\n\n        assert result == \"tool output\"\n        mock_run.assert_called_once()\n</code></pre>"},{"location":"testing/#test-configuration","title":"Test Configuration","text":""},{"location":"testing/#pytest-configuration","title":"Pytest Configuration","text":"<pre><code># pytest.ini\n[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = \n    --strict-markers\n    --disable-warnings\n    --tb=short\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    integration: marks tests as integration tests\n    e2e: marks tests as end-to-end tests\n    unit: marks tests as unit tests\n</code></pre>"},{"location":"testing/#test-environment-variables","title":"Test Environment Variables","text":"<pre><code># Set test environment\nexport DEVHUB_ENV=test\nexport DEVHUB_LOG_LEVEL=DEBUG\nexport DEVHUB_CONFIG_PATH=tests/fixtures/test_config.toml\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/#github-actions-test-workflow","title":"GitHub Actions Test Workflow","text":"<pre><code># .github/workflows/test.yml\nname: Test Suite\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: [3.8, 3.9, '3.10', 3.11]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -e .\n        pip install -r requirements-dev.txt\n\n    - name: Run tests\n      run: |\n        pytest --cov=devhub --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n</code></pre>"},{"location":"testing/#test-data-management","title":"Test Data Management","text":""},{"location":"testing/#test-fixtures","title":"Test Fixtures","text":"<pre><code>tests/fixtures/\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 minimal.toml\n\u2502   \u251c\u2500\u2500 complete.toml\n\u2502   \u2514\u2500\u2500 invalid.toml\n\u251c\u2500\u2500 sample_files/\n\u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u251c\u2500\u2500 well_formatted.py\n\u2502   \u2502   \u251c\u2500\u2500 needs_formatting.py\n\u2502   \u2502   \u2514\u2500\u2500 syntax_error.py\n\u2502   \u251c\u2500\u2500 javascript/\n\u2502   \u2514\u2500\u2500 json/\n\u2514\u2500\u2500 expected_outputs/\n    \u251c\u2500\u2500 python/\n    \u2514\u2500\u2500 javascript/\n</code></pre>"},{"location":"testing/#loading-test-data","title":"Loading Test Data","text":"<pre><code>def load_test_fixture(filename: str) -&gt; str:\n    \"\"\"Load test fixture file\"\"\"\n    fixtures_dir = Path(__file__).parent / \"fixtures\"\n    return (fixtures_dir / filename).read_text()\n\ndef get_sample_files(language: str) -&gt; list:\n    \"\"\"Get list of sample files for language\"\"\"\n    samples_dir = Path(__file__).parent / \"fixtures\" / \"sample_files\" / language\n    return list(samples_dir.glob(\"*.py\" if language == \"python\" else \"*\"))\n</code></pre>"},{"location":"testing/#test-automation","title":"Test Automation","text":""},{"location":"testing/#test-scripts","title":"Test Scripts","text":"<pre><code>#!/bin/bash\n# scripts/run-tests.sh\n\nset -e\n\necho \"Running DevHub test suite...\"\n\n# Unit tests\necho \"Running unit tests...\"\npytest tests/unit/ -v\n\n# Integration tests\necho \"Running integration tests...\"\npytest tests/integration/ -v\n\n# Performance tests (if not CI)\nif [ \"$CI\" != \"true\" ]; then\n    echo \"Running performance tests...\"\n    pytest tests/performance/ -v -m \"not slow\"\nfi\n\n# Coverage report\necho \"Generating coverage report...\"\npytest --cov=devhub --cov-report=html tests/\n\necho \"Tests completed successfully!\"\n</code></pre>"},{"location":"testing/#pre-commit-testing","title":"Pre-commit Testing","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: tests\n        name: Run tests\n        entry: pytest tests/unit/ tests/integration/\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"testing/#debug-configuration","title":"Debug Configuration","text":"<pre><code># Add to conftest.py for debugging\nimport logging\n\ndef pytest_configure(config):\n    \"\"\"Configure pytest for debugging\"\"\"\n    if config.getoption(\"--pdb\"):\n        # Enable detailed logging when debugging\n        logging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"testing/#vs-code-test-debugging","title":"VS Code Test Debugging","text":"<pre><code>{\n  \"name\": \"Debug Tests\",\n  \"type\": \"python\",\n  \"request\": \"launch\",\n  \"module\": \"pytest\",\n  \"args\": [\n    \"tests/unit/test_format.py::TestFormatPlugin::test_python_formatting\",\n    \"-v\",\n    \"-s\"\n  ],\n  \"console\": \"integratedTerminal\",\n  \"cwd\": \"${workspaceFolder}\"\n}\n</code></pre> <p>This comprehensive testing guide ensures DevHub maintains high quality and reliability across all components and use cases.</p>"},{"location":"plugins/api/","title":"Plugin API Reference","text":"<p>Complete API reference for DevHub plugin development.</p>"},{"location":"plugins/api/#core-classes","title":"Core Classes","text":""},{"location":"plugins/api/#plugin-base-class","title":"Plugin Base Class","text":"<pre><code>from devhub.core.plugin_manager import Plugin\n\nclass Plugin:\n    \"\"\"Base class for all DevHub plugins\"\"\"\n\n    # Plugin metadata\n    name: str = \"\"\n    description: str = \"\"\n    version: str = \"1.0.0\"\n    author: str = \"\"\n    dependencies: List[str] = []\n\n    def initialize(self) -&gt; None:\n        \"\"\"Initialize plugin resources\"\"\"\n        pass\n\n    def register_commands(self, cli_group) -&gt; None:\n        \"\"\"Register CLI commands with the main CLI group\"\"\"\n        pass\n\n    def cleanup(self) -&gt; None:\n        \"\"\"Cleanup resources on plugin shutdown\"\"\"\n        pass\n\n    def get_config(self) -&gt; Dict[str, Any]:\n        \"\"\"Get plugin configuration\"\"\"\n        pass\n\n    def set_config(self, key: str, value: Any) -&gt; None:\n        \"\"\"Set plugin configuration value\"\"\"\n        pass\n\n    def get_config_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"Return JSON schema for plugin configuration\"\"\"\n        pass\n</code></pre>"},{"location":"plugins/api/#configuration-management","title":"Configuration Management","text":"<pre><code>from devhub.core.config import ConfigManager\n\nclass ConfigManager:\n    \"\"\"Manages plugin and global configuration\"\"\"\n\n    def get_config(self, plugin_name: str = None) -&gt; Dict[str, Any]:\n        \"\"\"Get configuration for plugin or global config\"\"\"\n        pass\n\n    def set_config(self, key: str, value: Any, plugin_name: str = None) -&gt; None:\n        \"\"\"Set configuration value\"\"\"\n        pass\n\n    def validate_config(self, config: Dict[str, Any], schema: Dict[str, Any]) -&gt; bool:\n        \"\"\"Validate configuration against schema\"\"\"\n        pass\n</code></pre>"},{"location":"plugins/api/#event-system","title":"Event System","text":"<pre><code>from devhub.core.events import EventManager\n\nclass EventManager:\n    \"\"\"Manages inter-plugin communication via events\"\"\"\n\n    def publish(self, event_name: str, data: Dict[str, Any]) -&gt; None:\n        \"\"\"Publish an event\"\"\"\n        pass\n\n    def subscribe(self, event_name: str, callback: Callable) -&gt; None:\n        \"\"\"Subscribe to an event\"\"\"\n        pass\n\n    def unsubscribe(self, event_name: str, callback: Callable) -&gt; None:\n        \"\"\"Unsubscribe from an event\"\"\"\n        pass\n</code></pre>"},{"location":"plugins/api/#utility-functions","title":"Utility Functions","text":""},{"location":"plugins/api/#logging","title":"Logging","text":"<pre><code>from devhub.utils.logger import get_logger\n\ndef get_logger(name: str) -&gt; logging.Logger:\n    \"\"\"Get configured logger instance\"\"\"\n    pass\n</code></pre>"},{"location":"plugins/api/#exceptions","title":"Exceptions","text":"<pre><code>from devhub.utils.exceptions import (\n    PluginError,\n    ConfigError,\n    NetworkError,\n    FormatError\n)\n\nclass PluginError(Exception):\n    \"\"\"Base exception for plugin errors\"\"\"\n    pass\n\nclass ConfigError(PluginError):\n    \"\"\"Configuration related errors\"\"\"\n    pass\n\nclass NetworkError(PluginError):\n    \"\"\"Network operation errors\"\"\"\n    pass\n\nclass FormatError(PluginError):\n    \"\"\"Data formatting errors\"\"\"\n    pass\n</code></pre>"},{"location":"plugins/api/#command-decorators","title":"Command Decorators","text":""},{"location":"plugins/api/#click-integration","title":"Click Integration","text":"<pre><code>import click\n\n# Common decorators for plugin commands\n@click.command()\n@click.argument('files', nargs=-1, type=click.Path(exists=True))\n@click.option('--output', type=click.Path(), help='Output file')\n@click.option('--format', type=click.Choice(['json', 'yaml']), default='json')\n@click.option('--verbose', is_flag=True, help='Verbose output')\ndef my_command(files, output, format, verbose):\n    \"\"\"Command implementation\"\"\"\n    pass\n</code></pre> <p>For complete API documentation, see the source code.</p>"},{"location":"plugins/architecture/","title":"Plugin Architecture","text":"<p>DevHub's plugin architecture provides a powerful and flexible way to extend functionality while maintaining clean separation of concerns.</p>"},{"location":"plugins/architecture/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"plugins/architecture/#core-components","title":"Core Components","text":"<pre><code>DevHub Core\n\u251c\u2500\u2500 Plugin Manager      # Discovers and loads plugins\n\u251c\u2500\u2500 Configuration       # Manages plugin settings\n\u251c\u2500\u2500 CLI Interface       # Handles command routing\n\u2514\u2500\u2500 Event System       # Inter-plugin communication\n</code></pre>"},{"location":"plugins/architecture/#plugin-structure","title":"Plugin Structure","text":"<pre><code>from devhub.core.plugin_manager import Plugin\n\nclass MyPlugin(Plugin):\n    name = \"myplugin\"\n    description = \"My custom plugin\"\n    version = \"1.0.0\"\n    author = \"Your Name\"\n\n    def initialize(self):\n        \"\"\"Initialize plugin resources\"\"\"\n        pass\n\n    def register_commands(self, cli_group):\n        \"\"\"Register CLI commands\"\"\"\n        pass\n\n    def cleanup(self):\n        \"\"\"Cleanup resources on shutdown\"\"\"\n        pass\n</code></pre>"},{"location":"plugins/architecture/#plugin-lifecycle","title":"\ud83d\udd0c Plugin Lifecycle","text":""},{"location":"plugins/architecture/#1-discovery","title":"1. Discovery","text":"<p>DevHub automatically discovers plugins in: - <code>devhub/plugins/</code> (built-in plugins) - <code>~/.devhub/plugins/</code> (user plugins) - Environment variable <code>DEVHUB_PLUGIN_PATH</code></p>"},{"location":"plugins/architecture/#2-loading","title":"2. Loading","text":"<pre><code># Plugin loading sequence\n1. Import plugin module\n2. Instantiate plugin class\n3. Call initialize() method\n4. Register CLI commands\n5. Setup configuration\n6. Add to active plugins\n</code></pre>"},{"location":"plugins/architecture/#3-execution","title":"3. Execution","text":"<pre><code># Command execution flow\n1. CLI parser routes command to plugin\n2. Plugin validates input\n3. Plugin executes command logic\n4. Plugin returns results\n5. CLI formats and displays output\n</code></pre>"},{"location":"plugins/architecture/#plugin-types","title":"\ud83d\udce6 Plugin Types","text":""},{"location":"plugins/architecture/#command-plugins","title":"Command Plugins","text":"<p>Add new CLI commands and subcommands:</p> <pre><code>import click\nfrom devhub.core.plugin_manager import Plugin\n\nclass FormatPlugin(Plugin):\n    name = \"format\"\n\n    def register_commands(self, cli_group):\n        @cli_group.group()\n        def format():\n            \"\"\"Code formatting commands\"\"\"\n            pass\n\n        @format.command()\n        @click.argument('files', nargs=-1)\n        @click.option('--lang', help='Language to format')\n        def code(files, lang):\n            \"\"\"Format source code files\"\"\"\n            # Implementation here\n            pass\n</code></pre>"},{"location":"plugins/architecture/#service-plugins","title":"Service Plugins","text":"<p>Provide background services or utilities:</p> <pre><code>class MonitoringPlugin(Plugin):\n    name = \"monitoring\"\n\n    def initialize(self):\n        self.metrics_collector = MetricsCollector()\n        self.metrics_collector.start()\n\n    def get_metrics(self):\n        return self.metrics_collector.get_current_metrics()\n</code></pre>"},{"location":"plugins/architecture/#filter-plugins","title":"Filter Plugins","text":"<p>Process data between commands:</p> <pre><code>class DataFilterPlugin(Plugin):\n    name = \"datafilter\"\n\n    def filter_json(self, data, query):\n        # JSON filtering logic\n        return filtered_data\n\n    def transform_data(self, data, transformer):\n        # Data transformation logic\n        return transformed_data\n</code></pre>"},{"location":"plugins/architecture/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":""},{"location":"plugins/architecture/#plugin-configuration-schema","title":"Plugin Configuration Schema","text":"<pre><code>class MyPlugin(Plugin):\n    name = \"myplugin\"\n\n    def get_config_schema(self):\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"enabled\": {\"type\": \"boolean\", \"default\": True},\n                \"timeout\": {\"type\": \"integer\", \"default\": 30},\n                \"options\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"verbose\": {\"type\": \"boolean\", \"default\": False}\n                    }\n                }\n            }\n        }\n\n    def initialize(self):\n        config = self.get_config()\n        self.timeout = config.get('timeout', 30)\n        self.verbose = config.get('options', {}).get('verbose', False)\n</code></pre>"},{"location":"plugins/architecture/#configuration-access","title":"Configuration Access","text":"<pre><code># Reading configuration\nconfig = self.get_config()\napi_key = config.get('api_key')\n\n# Writing configuration\nself.set_config('last_update', datetime.now().isoformat())\n\n# Global configuration access\nfrom devhub.core.config import get_global_config\nglobal_config = get_global_config()\n</code></pre>"},{"location":"plugins/architecture/#inter-plugin-communication","title":"\ud83d\udd17 Inter-Plugin Communication","text":""},{"location":"plugins/architecture/#event-system","title":"Event System","text":"<pre><code># Publishing events\nself.publish_event('data_processed', {\n    'file_count': 5,\n    'processing_time': 1.23\n})\n\n# Subscribing to events\ndef initialize(self):\n    self.subscribe_event('data_processed', self.on_data_processed)\n\ndef on_data_processed(self, event_data):\n    print(f\"Processed {event_data['file_count']} files\")\n</code></pre>"},{"location":"plugins/architecture/#plugin-dependencies","title":"Plugin Dependencies","text":"<pre><code>class AdvancedPlugin(Plugin):\n    name = \"advanced\"\n    dependencies = [\"format\", \"api\"]  # Required plugins\n\n    def initialize(self):\n        # Access other plugins\n        format_plugin = self.get_plugin('format')\n        api_plugin = self.get_plugin('api')\n</code></pre>"},{"location":"plugins/architecture/#testing-plugins","title":"\ud83e\uddea Testing Plugins","text":""},{"location":"plugins/architecture/#unit-testing","title":"Unit Testing","text":"<pre><code>import unittest\nfrom devhub.core.plugin_manager import PluginManager\nfrom my_plugin import MyPlugin\n\nclass TestMyPlugin(unittest.TestCase):\n    def setUp(self):\n        self.plugin_manager = PluginManager()\n        self.plugin = MyPlugin()\n        self.plugin.initialize()\n\n    def test_plugin_functionality(self):\n        result = self.plugin.process_data(\"test input\")\n        self.assertEqual(result, \"expected output\")\n\n    def tearDown(self):\n        self.plugin.cleanup()\n</code></pre>"},{"location":"plugins/architecture/#integration-testing","title":"Integration Testing","text":"<pre><code>from click.testing import CliRunner\nfrom devhub.cli import cli\n\ndef test_plugin_cli_integration():\n    runner = CliRunner()\n    result = runner.invoke(cli, ['myplugin', 'command', '--option', 'value'])\n    assert result.exit_code == 0\n    assert 'expected output' in result.output\n</code></pre>"},{"location":"plugins/architecture/#best-practices","title":"\ud83d\udcda Best Practices","text":""},{"location":"plugins/architecture/#error-handling","title":"Error Handling","text":"<pre><code>from devhub.utils.exceptions import PluginError\n\nclass MyPlugin(Plugin):\n    def process_file(self, file_path):\n        try:\n            # File processing logic\n            return result\n        except FileNotFoundError:\n            raise PluginError(f\"File not found: {file_path}\")\n        except Exception as e:\n            raise PluginError(f\"Processing failed: {e}\") from e\n</code></pre>"},{"location":"plugins/architecture/#logging","title":"Logging","text":"<pre><code>from devhub.utils.logger import get_logger\n\nclass MyPlugin(Plugin):\n    def initialize(self):\n        self.logger = get_logger(f\"plugin.{self.name}\")\n\n    def process_data(self, data):\n        self.logger.info(f\"Processing {len(data)} items\")\n        # Processing logic\n        self.logger.debug(\"Processing completed successfully\")\n</code></pre>"},{"location":"plugins/architecture/#performance","title":"Performance","text":"<pre><code>import time\nfrom functools import wraps\n\ndef performance_monitor(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        duration = time.time() - start_time\n        print(f\"{func.__name__} took {duration:.2f} seconds\")\n        return result\n    return wrapper\n\nclass MyPlugin(Plugin):\n    @performance_monitor\n    def expensive_operation(self, data):\n        # Time-consuming operation\n        pass\n</code></pre>"},{"location":"plugins/architecture/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"plugins/architecture/#input-validation","title":"Input Validation","text":"<pre><code>import click\nfrom marshmallow import Schema, fields, ValidationError\n\nclass InputSchema(Schema):\n    file_path = fields.Str(required=True)\n    format = fields.Str(validate=lambda x: x in ['json', 'yaml', 'xml'])\n\nclass MyPlugin(Plugin):\n    def process_file(self, **kwargs):\n        try:\n            schema = InputSchema()\n            validated_data = schema.load(kwargs)\n        except ValidationError as e:\n            raise PluginError(f\"Invalid input: {e.messages}\")\n\n        # Process validated data\n</code></pre>"},{"location":"plugins/architecture/#safe-file-operations","title":"Safe File Operations","text":"<pre><code>import os\nfrom pathlib import Path\n\nclass MyPlugin(Plugin):\n    def safe_file_operation(self, file_path):\n        # Validate file path\n        path = Path(file_path).resolve()\n\n        # Check if path is within allowed directories\n        allowed_dirs = [Path.cwd(), Path.home() / 'projects']\n        if not any(path.is_relative_to(allowed_dir) for allowed_dir in allowed_dirs):\n            raise PluginError(\"Access to this path is not allowed\")\n\n        # Safe file operations\n        if path.exists() and path.is_file():\n            # Process file\n            pass\n</code></pre>"},{"location":"plugins/architecture/#plugin-examples","title":"\ud83d\udcd6 Plugin Examples","text":""},{"location":"plugins/architecture/#simple-hello-world-plugin","title":"Simple Hello World Plugin","text":"<pre><code>import click\nfrom devhub.core.plugin_manager import Plugin\n\nclass HelloPlugin(Plugin):\n    name = \"hello\"\n    description = \"Hello world plugin\"\n    version = \"1.0.0\"\n\n    def register_commands(self, cli_group):\n        @cli_group.command()\n        @click.option('--name', default='World', help='Name to greet')\n        def hello(name):\n            \"\"\"Say hello to someone\"\"\"\n            click.echo(f\"Hello, {name}!\")\n</code></pre>"},{"location":"plugins/architecture/#file-processing-plugin","title":"File Processing Plugin","text":"<pre><code>import click\nfrom pathlib import Path\nfrom devhub.core.plugin_manager import Plugin\nfrom devhub.utils.exceptions import PluginError\n\nclass FileProcessorPlugin(Plugin):\n    name = \"fileprocessor\"\n    description = \"Process files with various operations\"\n    version = \"1.0.0\"\n\n    def register_commands(self, cli_group):\n        @cli_group.group()\n        def process():\n            \"\"\"File processing commands\"\"\"\n            pass\n\n        @process.command()\n        @click.argument('input_file', type=click.Path(exists=True))\n        @click.option('--output', type=click.Path(), help='Output file')\n        @click.option('--operation', type=click.Choice(['uppercase', 'lowercase']))\n        def text(input_file, output, operation):\n            \"\"\"Process text files\"\"\"\n            try:\n                content = Path(input_file).read_text()\n\n                if operation == 'uppercase':\n                    processed = content.upper()\n                elif operation == 'lowercase':\n                    processed = content.lower()\n                else:\n                    processed = content\n\n                if output:\n                    Path(output).write_text(processed)\n                    click.echo(f\"Processed file saved to {output}\")\n                else:\n                    click.echo(processed)\n\n            except Exception as e:\n                raise PluginError(f\"Failed to process file: {e}\")\n</code></pre> <p>For more plugin examples and templates, visit: DevHub Plugin Examples</p>"},{"location":"plugins/creating/","title":"Creating Plugins","text":"<p>This guide walks you through creating your own DevHub plugins from scratch, including setup, development, testing, and distribution.</p>"},{"location":"plugins/creating/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"plugins/creating/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>DevHub installed in development mode</li> <li>Basic understanding of Click CLI framework</li> </ul>"},{"location":"plugins/creating/#development-setup","title":"Development Setup","text":"<pre><code># Clone DevHub for development\ngit clone https://github.com/username/devhub.git\ncd devhub\n\n# Create virtual environment\npython -m venv env\nsource env/bin/activate  # On Windows: env\\Scripts\\activate\n\n# Install in development mode\npip install -e .\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"plugins/creating/#plugin-structure","title":"\ud83c\udfd7\ufe0f Plugin Structure","text":""},{"location":"plugins/creating/#basic-plugin-template","title":"Basic Plugin Template","text":"<pre><code># src/devhub/plugins/myplugin/__init__.py\nimport click\nfrom devhub.core.plugin_manager import Plugin\nfrom devhub.utils.logger import get_logger\n\nclass MyPlugin(Plugin):\n    \"\"\"My custom DevHub plugin\"\"\"\n\n    name = \"myplugin\"\n    description = \"A sample plugin for DevHub\"\n    version = \"1.0.0\"\n    author = \"Your Name &lt;your.email@example.com&gt;\"\n\n    def initialize(self):\n        \"\"\"Initialize plugin resources\"\"\"\n        self.logger = get_logger(f\"plugin.{self.name}\")\n        self.logger.info(f\"Initializing {self.name} plugin\")\n\n        # Initialize any resources here\n        self.config = self.get_config()\n\n    def register_commands(self, cli_group):\n        \"\"\"Register CLI commands\"\"\"\n\n        @cli_group.group(name=self.name)\n        def myplugin():\n            \"\"\"My plugin commands\"\"\"\n            pass\n\n        @myplugin.command()\n        @click.argument('input_text')\n        @click.option('--uppercase', is_flag=True, help='Convert to uppercase')\n        def process(input_text, uppercase):\n            \"\"\"Process input text\"\"\"\n            if uppercase:\n                result = input_text.upper()\n            else:\n                result = input_text.lower()\n\n            click.echo(f\"Processed: {result}\")\n\n        @myplugin.command()\n        def status():\n            \"\"\"Show plugin status\"\"\"\n            click.echo(f\"Plugin {self.name} v{self.version} is running\")\n\n    def cleanup(self):\n        \"\"\"Cleanup resources\"\"\"\n        self.logger.info(f\"Cleaning up {self.name} plugin\")\n</code></pre>"},{"location":"plugins/creating/#directory-structure","title":"Directory Structure","text":"<pre><code>src/devhub/plugins/myplugin/\n\u251c\u2500\u2500 __init__.py          # Main plugin class\n\u251c\u2500\u2500 commands/            # Command implementations\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 process.py\n\u2502   \u2514\u2500\u2500 status.py\n\u251c\u2500\u2500 utils/              # Plugin utilities\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 helpers.py\n\u251c\u2500\u2500 config/             # Configuration schemas\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 schema.py\n\u2514\u2500\u2500 tests/              # Plugin tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 test_commands.py\n    \u2514\u2500\u2500 test_utils.py\n</code></pre>"},{"location":"plugins/creating/#advanced-plugin-features","title":"\ud83c\udfa8 Advanced Plugin Features","text":""},{"location":"plugins/creating/#configuration-management","title":"Configuration Management","text":"<pre><code># config/schema.py\nCONFIG_SCHEMA = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"enabled\": {\n            \"type\": \"boolean\",\n            \"default\": True,\n            \"description\": \"Enable/disable plugin\"\n        },\n        \"timeout\": {\n            \"type\": \"integer\",\n            \"default\": 30,\n            \"minimum\": 1,\n            \"maximum\": 300,\n            \"description\": \"Operation timeout in seconds\"\n        },\n        \"api\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"base_url\": {\n                    \"type\": \"string\",\n                    \"default\": \"https://api.example.com\"\n                },\n                \"api_key\": {\n                    \"type\": \"string\",\n                    \"description\": \"API key for authentication\"\n                }\n            }\n        }\n    }\n}\n\n# In your plugin class\nclass MyPlugin(Plugin):\n    def get_config_schema(self):\n        return CONFIG_SCHEMA\n\n    def initialize(self):\n        config = self.get_config()\n        self.timeout = config.get('timeout', 30)\n        self.api_base_url = config.get('api', {}).get('base_url')\n</code></pre>"},{"location":"plugins/creating/#command-organization","title":"Command Organization","text":"<pre><code># commands/process.py\nimport click\nfrom pathlib import Path\nfrom ..utils.helpers import process_file\n\n@click.command()\n@click.argument('files', nargs=-1, type=click.Path(exists=True))\n@click.option('--output-dir', type=click.Path(), help='Output directory')\n@click.option('--format', type=click.Choice(['json', 'yaml', 'xml']), \n              default='json', help='Output format')\n@click.option('--verbose', is_flag=True, help='Verbose output')\ndef process(files, output_dir, format, verbose):\n    \"\"\"Process multiple files\"\"\"\n    output_path = Path(output_dir) if output_dir else Path.cwd()\n\n    for file_path in files:\n        if verbose:\n            click.echo(f\"Processing {file_path}...\")\n\n        try:\n            result = process_file(file_path, format)\n            output_file = output_path / f\"{Path(file_path).stem}.{format}\"\n            output_file.write_text(result)\n\n            if verbose:\n                click.echo(f\"\u2713 Saved to {output_file}\")\n\n        except Exception as e:\n            click.echo(f\"\u2717 Error processing {file_path}: {e}\", err=True)\n\n# Register in main plugin class\ndef register_commands(self, cli_group):\n    from .commands.process import process\n\n    @cli_group.group(name=self.name)\n    def myplugin():\n        \"\"\"My plugin commands\"\"\"\n        pass\n\n    myplugin.add_command(process)\n</code></pre>"},{"location":"plugins/creating/#utility-functions","title":"Utility Functions","text":"<pre><code># utils/helpers.py\nimport json\nimport yaml\nfrom pathlib import Path\nfrom typing import Any, Dict\nfrom devhub.utils.exceptions import PluginError\n\ndef read_data_file(file_path: str) -&gt; Dict[str, Any]:\n    \"\"\"Read data from JSON or YAML file\"\"\"\n    path = Path(file_path)\n\n    try:\n        content = path.read_text()\n\n        if path.suffix.lower() in ['.json']:\n            return json.loads(content)\n        elif path.suffix.lower() in ['.yaml', '.yml']:\n            return yaml.safe_load(content)\n        else:\n            raise PluginError(f\"Unsupported file format: {path.suffix}\")\n\n    except Exception as e:\n        raise PluginError(f\"Failed to read {file_path}: {e}\")\n\ndef write_data_file(data: Dict[str, Any], file_path: str, format: str) -&gt; None:\n    \"\"\"Write data to file in specified format\"\"\"\n    path = Path(file_path)\n\n    try:\n        if format == 'json':\n            content = json.dumps(data, indent=2, ensure_ascii=False)\n        elif format == 'yaml':\n            content = yaml.dump(data, default_flow_style=False, indent=2)\n        else:\n            raise PluginError(f\"Unsupported format: {format}\")\n\n        path.write_text(content)\n\n    except Exception as e:\n        raise PluginError(f\"Failed to write {file_path}: {e}\")\n\ndef validate_input(data: Dict[str, Any], schema: Dict[str, Any]) -&gt; bool:\n    \"\"\"Validate input data against schema\"\"\"\n    # Implement validation logic\n    return True\n</code></pre>"},{"location":"plugins/creating/#testing-your-plugin","title":"\ud83e\uddea Testing Your Plugin","text":""},{"location":"plugins/creating/#unit-tests","title":"Unit Tests","text":"<pre><code># tests/test_commands.py\nimport unittest\nfrom unittest.mock import patch, MagicMock\nfrom click.testing import CliRunner\nfrom devhub.plugins.myplugin.commands.process import process\n\nclass TestProcessCommand(unittest.TestCase):\n    def setUp(self):\n        self.runner = CliRunner()\n\n    def test_process_single_file(self):\n        \"\"\"Test processing a single file\"\"\"\n        with self.runner.isolated_filesystem():\n            # Create test file\n            with open('test.txt', 'w') as f:\n                f.write('hello world')\n\n            # Run command\n            result = self.runner.invoke(process, ['test.txt', '--uppercase'])\n\n            # Assertions\n            self.assertEqual(result.exit_code, 0)\n            self.assertIn('HELLO WORLD', result.output)\n\n    def test_process_invalid_file(self):\n        \"\"\"Test error handling for invalid file\"\"\"\n        result = self.runner.invoke(process, ['nonexistent.txt'])\n        self.assertNotEqual(result.exit_code, 0)\n        self.assertIn('Error', result.output)\n\n# tests/test_utils.py\nimport unittest\nimport tempfile\nfrom pathlib import Path\nfrom devhub.plugins.myplugin.utils.helpers import read_data_file, write_data_file\n\nclass TestUtilityFunctions(unittest.TestCase):\n    def test_read_json_file(self):\n        \"\"\"Test reading JSON files\"\"\"\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:\n            json.dump({'key': 'value'}, f)\n            f.flush()\n\n            data = read_data_file(f.name)\n            self.assertEqual(data['key'], 'value')\n\n            Path(f.name).unlink()  # Cleanup\n\n    def test_write_yaml_file(self):\n        \"\"\"Test writing YAML files\"\"\"\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:\n            test_data = {'name': 'test', 'values': [1, 2, 3]}\n            write_data_file(test_data, f.name, 'yaml')\n\n            # Verify file was written correctly\n            content = Path(f.name).read_text()\n            self.assertIn('name: test', content)\n\n            Path(f.name).unlink()  # Cleanup\n</code></pre>"},{"location":"plugins/creating/#integration-tests","title":"Integration Tests","text":"<pre><code># tests/test_integration.py\nimport unittest\nfrom click.testing import CliRunner\nfrom devhub.cli import cli\nfrom devhub.core.plugin_manager import PluginManager\n\nclass TestPluginIntegration(unittest.TestCase):\n    def setUp(self):\n        self.runner = CliRunner()\n        self.plugin_manager = PluginManager()\n\n    def test_plugin_loaded(self):\n        \"\"\"Test that plugin is properly loaded\"\"\"\n        plugins = self.plugin_manager.get_loaded_plugins()\n        plugin_names = [p.name for p in plugins]\n        self.assertIn('myplugin', plugin_names)\n\n    def test_cli_integration(self):\n        \"\"\"Test CLI integration\"\"\"\n        result = self.runner.invoke(cli, ['myplugin', 'status'])\n        self.assertEqual(result.exit_code, 0)\n        self.assertIn('Plugin myplugin', result.output)\n\n    def test_config_integration(self):\n        \"\"\"Test configuration integration\"\"\"\n        result = self.runner.invoke(cli, ['config', 'get', 'myplugin.timeout'])\n        self.assertEqual(result.exit_code, 0)\n</code></pre>"},{"location":"plugins/creating/#running-tests","title":"Running Tests","text":"<pre><code># Run plugin tests\npython -m pytest src/devhub/plugins/myplugin/tests/ -v\n\n# Run with coverage\npython -m pytest src/devhub/plugins/myplugin/tests/ --cov=devhub.plugins.myplugin\n\n# Run integration tests\npython -m pytest tests/integration/ -k myplugin\n</code></pre>"},{"location":"plugins/creating/#plugin-distribution","title":"\ud83d\udce6 Plugin Distribution","text":""},{"location":"plugins/creating/#package-setup","title":"Package Setup","text":"<pre><code># setup.py for standalone plugin\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"devhub-plugin-myplugin\",\n    version=\"1.0.0\",\n    description=\"My custom DevHub plugin\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    packages=find_packages(),\n    install_requires=[\n        \"devhub-cli&gt;=1.0.0\",\n        \"click&gt;=8.0.0\",\n        \"pyyaml&gt;=6.0\",\n    ],\n    entry_points={\n        \"devhub.plugins\": [\n            \"myplugin = myplugin:MyPlugin\"\n        ]\n    },\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n)\n</code></pre>"},{"location":"plugins/creating/#documentation","title":"Documentation","text":"<p>Create comprehensive documentation for your plugin:</p> <pre><code># MyPlugin Documentation\n\n## Installation\n\n```bash\npip install devhub-plugin-myplugin\n</code></pre>"},{"location":"plugins/creating/#usage","title":"Usage","text":"<pre><code># Basic usage\ndevhub myplugin process \"hello world\" --uppercase\n\n# Advanced usage\ndevhub myplugin process file1.txt file2.txt --output-dir ./processed/\n</code></pre>"},{"location":"plugins/creating/#configuration","title":"Configuration","text":"<pre><code>[myplugin]\ntimeout = 60\napi.base_url = \"https://api.example.com\"\napi.api_key = \"your-api-key\"\n</code></pre>"},{"location":"plugins/creating/#examples","title":"Examples","text":"<p>... <pre><code>### Publishing\n\n```bash\n# Build package\npython setup.py sdist bdist_wheel\n\n# Test installation\npip install dist/devhub-plugin-myplugin-1.0.0.tar.gz\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre></p>"},{"location":"plugins/creating/#plugin-development-tips","title":"\ud83d\ude80 Plugin Development Tips","text":""},{"location":"plugins/creating/#performance-optimization","title":"Performance Optimization","text":"<pre><code>import functools\nimport time\nfrom typing import Any, Callable\n\ndef cache_result(ttl_seconds: int = 300):\n    \"\"\"Cache function results with TTL\"\"\"\n    def decorator(func: Callable) -&gt; Callable:\n        cache = {}\n\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = str(args) + str(sorted(kwargs.items()))\n            current_time = time.time()\n\n            if key in cache:\n                result, timestamp = cache[key]\n                if current_time - timestamp &lt; ttl_seconds:\n                    return result\n\n            result = func(*args, **kwargs)\n            cache[key] = (result, current_time)\n            return result\n\n        return wrapper\n    return decorator\n\nclass MyPlugin(Plugin):\n    @cache_result(ttl_seconds=60)\n    def expensive_api_call(self, endpoint: str) -&gt; Any:\n        # Expensive operation\n        return api_response\n</code></pre>"},{"location":"plugins/creating/#error-handling","title":"Error Handling","text":"<pre><code>from devhub.utils.exceptions import PluginError\nimport logging\n\nclass MyPlugin(Plugin):\n    def safe_operation(self, risky_input: str) -&gt; str:\n        try:\n            # Validate input\n            if not risky_input.strip():\n                raise ValueError(\"Input cannot be empty\")\n\n            # Perform operation\n            result = self.process_input(risky_input)\n\n            # Validate output\n            if not result:\n                raise RuntimeError(\"Processing failed to produce output\")\n\n            return result\n\n        except ValueError as e:\n            self.logger.warning(f\"Invalid input: {e}\")\n            raise PluginError(f\"Invalid input: {e}\")\n        except Exception as e:\n            self.logger.error(f\"Unexpected error: {e}\")\n            raise PluginError(f\"Operation failed: {e}\") from e\n</code></pre>"},{"location":"plugins/creating/#async-operations","title":"Async Operations","text":"<pre><code>import asyncio\nimport aiohttp\nfrom typing import List\n\nclass MyPlugin(Plugin):\n    async def fetch_multiple_urls(self, urls: List[str]) -&gt; List[dict]:\n        \"\"\"Fetch multiple URLs concurrently\"\"\"\n        async with aiohttp.ClientSession() as session:\n            tasks = [self.fetch_url(session, url) for url in urls]\n            results = await asyncio.gather(*tasks, return_exceptions=True)\n\n            # Handle results and exceptions\n            successful_results = []\n            for i, result in enumerate(results):\n                if isinstance(result, Exception):\n                    self.logger.error(f\"Failed to fetch {urls[i]}: {result}\")\n                else:\n                    successful_results.append(result)\n\n            return successful_results\n\n    async def fetch_url(self, session: aiohttp.ClientSession, url: str) -&gt; dict:\n        \"\"\"Fetch single URL\"\"\"\n        async with session.get(url) as response:\n            return await response.json()\n</code></pre>"},{"location":"plugins/creating/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>DevHub Plugin API Reference</li> <li>Plugin Examples Repository</li> <li>DevHub Development Guide</li> <li>Community Plugins</li> </ul> <p>For questions and support, visit our Discord Community or GitHub Discussions.</p>"},{"location":"plugins/examples/","title":"Plugin Examples","text":"<p>Real-world examples and templates for common plugin patterns.</p>"},{"location":"plugins/examples/#simple-command-plugin","title":"\ud83d\udd27 Simple Command Plugin","text":""},{"location":"plugins/examples/#hello-world-plugin","title":"Hello World Plugin","text":"<pre><code>import click\nfrom devhub.core.plugin_manager import Plugin\n\nclass HelloPlugin(Plugin):\n    name = \"hello\"\n    description = \"Simple greeting plugin\"\n    version = \"1.0.0\"\n\n    def register_commands(self, cli_group):\n        @cli_group.command()\n        @click.option('--name', default='World', help='Name to greet')\n        @click.option('--times', default=1, help='Number of times to greet')\n        def hello(name, times):\n            \"\"\"Say hello to someone\"\"\"\n            for i in range(times):\n                click.echo(f\"Hello, {name}!\")\n</code></pre>"},{"location":"plugins/examples/#usage","title":"Usage","text":"<pre><code>devhub hello --name Alice --times 3\n</code></pre>"},{"location":"plugins/examples/#data-processing-plugin","title":"\ud83d\udcca Data Processing Plugin","text":""},{"location":"plugins/examples/#csv-processor-plugin","title":"CSV Processor Plugin","text":"<pre><code>import csv\nimport json\nimport click\nfrom pathlib import Path\nfrom devhub.core.plugin_manager import Plugin\nfrom devhub.utils.exceptions import PluginError\n\nclass CSVProcessorPlugin(Plugin):\n    name = \"csvproc\"\n    description = \"CSV data processing plugin\"\n    version = \"1.0.0\"\n\n    def register_commands(self, cli_group):\n        @cli_group.group()\n        def csv():\n            \"\"\"CSV processing commands\"\"\"\n            pass\n\n        @csv.command()\n        @click.argument('input_file', type=click.Path(exists=True))\n        @click.option('--output', type=click.Path(), help='Output JSON file')\n        @click.option('--delimiter', default=',', help='CSV delimiter')\n        def to_json(input_file, output, delimiter):\n            \"\"\"Convert CSV to JSON\"\"\"\n            try:\n                data = []\n                with open(input_file, 'r', newline='') as csvfile:\n                    reader = csv.DictReader(csvfile, delimiter=delimiter)\n                    for row in reader:\n                        data.append(dict(row))\n\n                json_data = json.dumps(data, indent=2)\n\n                if output:\n                    Path(output).write_text(json_data)\n                    click.echo(f\"\u2713 Converted to {output}\")\n                else:\n                    click.echo(json_data)\n\n            except Exception as e:\n                raise PluginError(f\"Conversion failed: {e}\")\n\n        @csv.command()\n        @click.argument('input_file', type=click.Path(exists=True))\n        @click.option('--column', required=True, help='Column to analyze')\n        def stats(input_file, column):\n            \"\"\"Calculate statistics for a column\"\"\"\n            try:\n                values = []\n                with open(input_file, 'r', newline='') as csvfile:\n                    reader = csv.DictReader(csvfile)\n                    for row in reader:\n                        if column in row:\n                            try:\n                                values.append(float(row[column]))\n                            except ValueError:\n                                pass  # Skip non-numeric values\n\n                if values:\n                    stats = {\n                        'count': len(values),\n                        'sum': sum(values),\n                        'mean': sum(values) / len(values),\n                        'min': min(values),\n                        'max': max(values)\n                    }\n\n                    for key, value in stats.items():\n                        click.echo(f\"{key}: {value}\")\n                else:\n                    click.echo(f\"No numeric values found in column '{column}'\")\n\n            except Exception as e:\n                raise PluginError(f\"Statistics calculation failed: {e}\")\n</code></pre>"},{"location":"plugins/examples/#http-client-plugin","title":"\ud83c\udf10 HTTP Client Plugin","text":""},{"location":"plugins/examples/#api-client-plugin","title":"API Client Plugin","text":"<pre><code>import json\nimport requests\nimport click\nfrom devhub.core.plugin_manager import Plugin\nfrom devhub.utils.exceptions import NetworkError\n\nclass APIClientPlugin(Plugin):\n    name = \"apiclient\"\n    description = \"HTTP API client plugin\"\n    version = \"1.0.0\"\n\n    def get_config_schema(self):\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"default_timeout\": {\"type\": \"integer\", \"default\": 30},\n                \"default_headers\": {\n                    \"type\": \"object\",\n                    \"default\": {\"User-Agent\": \"DevHub API Client\"}\n                }\n            }\n        }\n\n    def register_commands(self, cli_group):\n        @cli_group.group()\n        def api():\n            \"\"\"API client commands\"\"\"\n            pass\n\n        @api.command()\n        @click.argument('url')\n        @click.option('--method', default='GET', type=click.Choice(['GET', 'POST', 'PUT', 'DELETE']))\n        @click.option('--data', help='JSON data for request body')\n        @click.option('--header', multiple=True, help='HTTP headers (key:value)')\n        @click.option('--timeout', type=int, help='Request timeout')\n        def request(url, method, data, header, timeout):\n            \"\"\"Make HTTP request\"\"\"\n            config = self.get_config()\n\n            # Prepare headers\n            headers = config.get('default_headers', {}).copy()\n            for h in header:\n                if ':' in h:\n                    key, value = h.split(':', 1)\n                    headers[key.strip()] = value.strip()\n\n            # Prepare request\n            kwargs = {\n                'url': url,\n                'method': method,\n                'headers': headers,\n                'timeout': timeout or config.get('default_timeout', 30)\n            }\n\n            if data:\n                try:\n                    kwargs['json'] = json.loads(data)\n                    headers['Content-Type'] = 'application/json'\n                except json.JSONDecodeError:\n                    kwargs['data'] = data\n\n            try:\n                response = requests.request(**kwargs)\n\n                # Display response\n                click.echo(f\"Status: {response.status_code}\")\n                click.echo(f\"Headers: {dict(response.headers)}\")\n\n                try:\n                    json_response = response.json()\n                    click.echo(f\"Body: {json.dumps(json_response, indent=2)}\")\n                except json.JSONDecodeError:\n                    click.echo(f\"Body: {response.text}\")\n\n            except requests.exceptions.RequestException as e:\n                raise NetworkError(f\"Request failed: {e}\")\n</code></pre>"},{"location":"plugins/examples/#password-generator-plugin","title":"\ud83d\udd10 Password Generator Plugin","text":""},{"location":"plugins/examples/#security-plugin","title":"Security Plugin","text":"<pre><code>import secrets\nimport string\nimport click\nfrom devhub.core.plugin_manager import Plugin\n\nclass SecurityPlugin(Plugin):\n    name = \"security\"\n    description = \"Security utilities plugin\"\n    version = \"1.0.0\"\n\n    def register_commands(self, cli_group):\n        @cli_group.group()\n        def security():\n            \"\"\"Security utilities\"\"\"\n            pass\n\n        @security.command()\n        @click.option('--length', default=16, help='Password length')\n        @click.option('--no-symbols', is_flag=True, help='Exclude symbols')\n        @click.option('--no-numbers', is_flag=True, help='Exclude numbers')\n        @click.option('--count', default=1, help='Number of passwords')\n        def password(length, no_symbols, no_numbers, count):\n            \"\"\"Generate secure passwords\"\"\"\n            chars = string.ascii_letters\n\n            if not no_numbers:\n                chars += string.digits\n\n            if not no_symbols:\n                chars += \"!@#$%^&amp;*\"\n\n            for _ in range(count):\n                password = ''.join(secrets.choice(chars) for _ in range(length))\n                click.echo(password)\n\n        @security.command()\n        @click.argument('text')\n        @click.option('--algorithm', default='sha256', \n                     type=click.Choice(['md5', 'sha1', 'sha256', 'sha512']))\n        def hash(text, algorithm):\n            \"\"\"Generate hash of text\"\"\"\n            import hashlib\n\n            hash_func = getattr(hashlib, algorithm)\n            hash_value = hash_func(text.encode()).hexdigest()\n            click.echo(f\"{algorithm.upper()}: {hash_value}\")\n</code></pre>"},{"location":"plugins/examples/#file-management-plugin","title":"\ud83d\udcc1 File Management Plugin","text":""},{"location":"plugins/examples/#file-utilities-plugin","title":"File Utilities Plugin","text":"<pre><code>import os\nimport shutil\nimport click\nfrom pathlib import Path\nfrom devhub.core.plugin_manager import Plugin\nfrom devhub.utils.exceptions import PluginError\n\nclass FileUtilsPlugin(Plugin):\n    name = \"fileutils\"\n    description = \"File management utilities\"\n    version = \"1.0.0\"\n\n    def register_commands(self, cli_group):\n        @cli_group.group()\n        def files():\n            \"\"\"File management commands\"\"\"\n            pass\n\n        @files.command()\n        @click.argument('directory', type=click.Path(exists=True))\n        @click.option('--extension', help='Filter by file extension')\n        @click.option('--size', help='Filter by size (e.g., +1M, -100K)')\n        @click.option('--recursive', is_flag=True, help='Search recursively')\n        def find(directory, extension, size, recursive):\n            \"\"\"Find files matching criteria\"\"\"\n            path = Path(directory)\n            pattern = \"**/*\" if recursive else \"*\"\n\n            for file_path in path.glob(pattern):\n                if file_path.is_file():\n                    # Extension filter\n                    if extension and not file_path.suffix.lower().endswith(extension.lower()):\n                        continue\n\n                    # Size filter (simplified)\n                    if size:\n                        file_size = file_path.stat().st_size\n                        # Add size filtering logic here\n\n                    click.echo(str(file_path))\n\n        @files.command()\n        @click.argument('source', type=click.Path(exists=True))\n        @click.argument('destination', type=click.Path())\n        @click.option('--backup', is_flag=True, help='Create backup')\n        def copy(source, destination, backup):\n            \"\"\"Copy files or directories\"\"\"\n            src_path = Path(source)\n            dst_path = Path(destination)\n\n            try:\n                if backup and dst_path.exists():\n                    backup_path = dst_path.with_suffix(dst_path.suffix + '.backup')\n                    shutil.move(str(dst_path), str(backup_path))\n                    click.echo(f\"\u2713 Backup created: {backup_path}\")\n\n                if src_path.is_file():\n                    shutil.copy2(src_path, dst_path)\n                else:\n                    shutil.copytree(src_path, dst_path)\n\n                click.echo(f\"\u2713 Copied {source} to {destination}\")\n\n            except Exception as e:\n                raise PluginError(f\"Copy failed: {e}\")\n\n        @files.command()\n        @click.argument('directory', type=click.Path(exists=True))\n        def size(directory):\n            \"\"\"Calculate directory size\"\"\"\n            total_size = 0\n            file_count = 0\n\n            for dirpath, dirnames, filenames in os.walk(directory):\n                for filename in filenames:\n                    filepath = os.path.join(dirpath, filename)\n                    try:\n                        total_size += os.path.getsize(filepath)\n                        file_count += 1\n                    except OSError:\n                        pass\n\n            # Format size\n            for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n                if total_size &lt; 1024.0:\n                    break\n                total_size /= 1024.0\n\n            click.echo(f\"Directory: {directory}\")\n            click.echo(f\"Files: {file_count}\")\n            click.echo(f\"Total size: {total_size:.1f} {unit}\")\n</code></pre>"},{"location":"plugins/examples/#configuration-example","title":"\ud83d\udd27 Configuration Example","text":""},{"location":"plugins/examples/#plugin-with-complex-configuration","title":"Plugin with Complex Configuration","text":"<pre><code>import click\nfrom devhub.core.plugin_manager import Plugin\n\nclass ConfigurablePlugin(Plugin):\n    name = \"configurable\"\n    description = \"Plugin with complex configuration\"\n    version = \"1.0.0\"\n\n    def get_config_schema(self):\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"enabled\": {\"type\": \"boolean\", \"default\": True},\n                \"processing\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"timeout\": {\"type\": \"integer\", \"default\": 30},\n                        \"batch_size\": {\"type\": \"integer\", \"default\": 100},\n                        \"parallel\": {\"type\": \"boolean\", \"default\": False}\n                    }\n                },\n                \"output\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"format\": {\n                            \"type\": \"string\",\n                            \"enum\": [\"json\", \"yaml\", \"csv\"],\n                            \"default\": \"json\"\n                        },\n                        \"compression\": {\"type\": \"boolean\", \"default\": False}\n                    }\n                },\n                \"notifications\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"enabled\": {\"type\": \"boolean\", \"default\": False},\n                        \"webhook_url\": {\"type\": \"string\"},\n                        \"email\": {\"type\": \"string\"}\n                    }\n                }\n            }\n        }\n\n    def initialize(self):\n        config = self.get_config()\n\n        # Processing settings\n        processing = config.get('processing', {})\n        self.timeout = processing.get('timeout', 30)\n        self.batch_size = processing.get('batch_size', 100)\n        self.parallel = processing.get('parallel', False)\n\n        # Output settings\n        output = config.get('output', {})\n        self.output_format = output.get('format', 'json')\n        self.compression = output.get('compression', False)\n\n        # Notification settings\n        notifications = config.get('notifications', {})\n        self.notifications_enabled = notifications.get('enabled', False)\n        self.webhook_url = notifications.get('webhook_url')\n\n    def register_commands(self, cli_group):\n        @cli_group.command()\n        @click.argument('input_files', nargs=-1)\n        def process(input_files):\n            \"\"\"Process files with configured settings\"\"\"\n            click.echo(f\"Processing {len(input_files)} files...\")\n            click.echo(f\"Timeout: {self.timeout}s\")\n            click.echo(f\"Batch size: {self.batch_size}\")\n            click.echo(f\"Output format: {self.output_format}\")\n\n            # Processing logic here\n</code></pre>"},{"location":"plugins/examples/#testing-examples","title":"\ud83d\udccb Testing Examples","text":""},{"location":"plugins/examples/#plugin-test-suite","title":"Plugin Test Suite","text":"<pre><code># tests/test_plugin.py\nimport unittest\nimport tempfile\nfrom pathlib import Path\nfrom click.testing import CliRunner\nfrom my_plugin import MyPlugin\n\nclass TestMyPlugin(unittest.TestCase):\n    def setUp(self):\n        self.plugin = MyPlugin()\n        self.plugin.initialize()\n        self.runner = CliRunner()\n\n    def test_command_execution(self):\n        \"\"\"Test basic command execution\"\"\"\n        result = self.runner.invoke(self.plugin.my_command, ['--option', 'value'])\n        self.assertEqual(result.exit_code, 0)\n        self.assertIn('expected output', result.output)\n\n    def test_file_processing(self):\n        \"\"\"Test file processing functionality\"\"\"\n        with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:\n            f.write('test content')\n            f.flush()\n\n            result = self.plugin.process_file(f.name)\n            self.assertIsNotNone(result)\n\n            Path(f.name).unlink()  # Cleanup\n\n    def test_error_handling(self):\n        \"\"\"Test error handling\"\"\"\n        with self.assertRaises(PluginError):\n            self.plugin.invalid_operation()\n\n    def tearDown(self):\n        self.plugin.cleanup()\n</code></pre> <p>For more examples and templates, visit our Examples Repository.</p>"},{"location":"reference/api/","title":"API Reference","text":"<p>Complete API reference for DevHub's Python API and plugin development.</p>"},{"location":"reference/api/#core-api","title":"Core API","text":""},{"location":"reference/api/#plugin-base-class","title":"Plugin Base Class","text":"<p>The foundation for all DevHub plugins.</p> <pre><code>from devhub.core.plugin_manager import Plugin\n\nclass Plugin:\n    \"\"\"Base class for all DevHub plugins\"\"\"\n\n    # Plugin metadata\n    name: str = \"\"\n    description: str = \"\"\n    version: str = \"1.0.0\"\n    author: str = \"\"\n    dependencies: List[str] = []\n\n    def initialize(self) -&gt; None:\n        \"\"\"Initialize plugin resources\"\"\"\n        pass\n\n    def register_commands(self, cli_group) -&gt; None:\n        \"\"\"Register CLI commands with the main CLI group\"\"\"\n        pass\n\n    def cleanup(self) -&gt; None:\n        \"\"\"Cleanup resources on plugin shutdown\"\"\"\n        pass\n\n    def get_config(self) -&gt; Dict[str, Any]:\n        \"\"\"Get plugin configuration\"\"\"\n        pass\n\n    def set_config(self, key: str, value: Any) -&gt; None:\n        \"\"\"Set plugin configuration value\"\"\"\n        pass\n\n    def get_config_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"Return JSON schema for plugin configuration\"\"\"\n        pass\n</code></pre>"},{"location":"reference/api/#configuration-manager","title":"Configuration Manager","text":"<p>Manages plugin and global configuration.</p> <pre><code>from devhub.core.config import ConfigManager\n\nclass ConfigManager:\n    \"\"\"Manages plugin and global configuration\"\"\"\n\n    def get_config(self, plugin_name: str = None) -&gt; Dict[str, Any]:\n        \"\"\"Get configuration for plugin or global config\n\n        Args:\n            plugin_name: Name of plugin to get config for, or None for global\n\n        Returns:\n            Configuration dictionary\n        \"\"\"\n        pass\n\n    def set_config(self, key: str, value: Any, plugin_name: str = None) -&gt; None:\n        \"\"\"Set configuration value\n\n        Args:\n            key: Configuration key\n            value: Configuration value\n            plugin_name: Plugin name, or None for global config\n        \"\"\"\n        pass\n\n    def validate_config(self, config: Dict[str, Any], schema: Dict[str, Any]) -&gt; bool:\n        \"\"\"Validate configuration against schema\n\n        Args:\n            config: Configuration to validate\n            schema: JSON schema for validation\n\n        Returns:\n            True if valid, raises ValidationError if invalid\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/api/#event-system","title":"Event System","text":"<p>Manages inter-plugin communication via events.</p> <pre><code>from devhub.core.events import EventManager\n\nclass EventManager:\n    \"\"\"Manages inter-plugin communication via events\"\"\"\n\n    def publish(self, event_name: str, data: Dict[str, Any]) -&gt; None:\n        \"\"\"Publish an event\n\n        Args:\n            event_name: Name of the event\n            data: Event data payload\n        \"\"\"\n        pass\n\n    def subscribe(self, event_name: str, callback: Callable) -&gt; None:\n        \"\"\"Subscribe to an event\n\n        Args:\n            event_name: Name of the event to subscribe to\n            callback: Function to call when event is published\n        \"\"\"\n        pass\n\n    def unsubscribe(self, event_name: str, callback: Callable) -&gt; None:\n        \"\"\"Unsubscribe from an event\n\n        Args:\n            event_name: Name of the event\n            callback: Function to unsubscribe\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/api/#plugin-apis","title":"Plugin APIs","text":""},{"location":"reference/api/#format-plugin","title":"Format Plugin","text":"<p>The format plugin provides code formatting capabilities.</p> <pre><code>from devhub.plugins.format import FormatPlugin\n\nclass FormatPlugin(Plugin):\n    \"\"\"Code formatting plugin\"\"\"\n\n    name = \"format\"\n    description = \"Multi-language code formatter\"\n\n    def _format_python(self, content: str, file_path: Path, **kwargs) -&gt; str:\n        \"\"\"Format Python code using Black\n\n        Args:\n            content: Python code to format\n            file_path: Path to the file being formatted\n            **kwargs: Additional formatting options\n\n        Returns:\n            Formatted Python code\n        \"\"\"\n        pass\n\n    def _format_javascript(self, content: str, file_path: Path, **kwargs) -&gt; str:\n        \"\"\"Format JavaScript code using Prettier\n\n        Args:\n            content: JavaScript code to format\n            file_path: Path to the file being formatted\n            **kwargs: Additional formatting options\n\n        Returns:\n            Formatted JavaScript code\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/api/#api-plugin","title":"API Plugin","text":"<p>The API plugin provides HTTP client capabilities.</p> <pre><code>from devhub.plugins.api import APIPlugin\n\nclass APIPlugin(Plugin):\n    \"\"\"HTTP API testing plugin\"\"\"\n\n    name = \"api\"\n    description = \"HTTP API testing and benchmarking\"\n\n    def make_request(self, url: str, method: str = \"GET\", **kwargs) -&gt; Dict[str, Any]:\n        \"\"\"Make HTTP request\n\n        Args:\n            url: URL to request\n            method: HTTP method\n            **kwargs: Additional request options\n\n        Returns:\n            Response data\n        \"\"\"\n        pass\n\n    def benchmark_endpoint(self, url: str, requests: int = 100, **kwargs) -&gt; Dict[str, Any]:\n        \"\"\"Benchmark API endpoint\n\n        Args:\n            url: URL to benchmark\n            requests: Number of requests to make\n            **kwargs: Additional benchmark options\n\n        Returns:\n            Benchmark results\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/api/#utility-classes","title":"Utility Classes","text":""},{"location":"reference/api/#logger","title":"Logger","text":"<p>Provides logging functionality for plugins.</p> <pre><code>from devhub.utils.logger import get_logger\n\ndef get_logger(name: str) -&gt; logging.Logger:\n    \"\"\"Get configured logger instance\n\n    Args:\n        name: Logger name (usually plugin name)\n\n    Returns:\n        Configured logger instance\n    \"\"\"\n    pass\n\n# Usage in plugins\nclass MyPlugin(Plugin):\n    def initialize(self):\n        self.logger = get_logger(f\"plugin.{self.name}\")\n        self.logger.info(\"Plugin initialized\")\n</code></pre>"},{"location":"reference/api/#exceptions","title":"Exceptions","text":"<p>Custom exception classes for DevHub.</p> <pre><code>from devhub.utils.exceptions import (\n    PluginError,\n    ConfigError,\n    NetworkError,\n    FormatError\n)\n\nclass PluginError(Exception):\n    \"\"\"Base exception for plugin errors\"\"\"\n    pass\n\nclass ConfigError(PluginError):\n    \"\"\"Configuration related errors\"\"\"\n    pass\n\nclass NetworkError(PluginError):\n    \"\"\"Network operation errors\"\"\"\n    pass\n\nclass FormatError(PluginError):\n    \"\"\"Data formatting errors\"\"\"\n    pass\n\n# Usage\ndef risky_operation():\n    try:\n        # Some operation\n        pass\n    except Exception as e:\n        raise PluginError(f\"Operation failed: {e}\") from e\n</code></pre>"},{"location":"reference/api/#cli-integration","title":"CLI Integration","text":""},{"location":"reference/api/#command-decorators","title":"Command Decorators","text":"<p>Common Click decorators for plugin commands:</p> <pre><code>import click\nfrom devhub.utils.cli import (\n    common_options,\n    output_option,\n    verbose_option,\n    config_option\n)\n\n@click.command()\n@common_options\n@output_option\n@verbose_option\ndef my_command(output, verbose, **kwargs):\n    \"\"\"My command with common options\"\"\"\n    pass\n</code></pre>"},{"location":"reference/api/#progress-reporting","title":"Progress Reporting","text":"<pre><code>from rich.progress import track\nfrom devhub.utils.progress import create_progress\n\n# Simple progress with track\nfor item in track(items, description=\"Processing...\"):\n    process_item(item)\n\n# Advanced progress reporting\nwith create_progress() as progress:\n    task = progress.add_task(\"Processing files\", total=len(files))\n    for file in files:\n        process_file(file)\n        progress.advance(task)\n</code></pre>"},{"location":"reference/api/#configuration-schema","title":"Configuration Schema","text":""},{"location":"reference/api/#plugin-configuration-schema","title":"Plugin Configuration Schema","text":"<pre><code>from devhub.core.config import validate_config\n\n# Define configuration schema\nschema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"enabled\": {\"type\": \"boolean\", \"default\": True},\n        \"timeout\": {\"type\": \"integer\", \"minimum\": 1, \"maximum\": 300}\n    },\n    \"required\": [\"enabled\"]\n}\n\n# Validate configuration\nconfig = {\"enabled\": True, \"timeout\": 30}\nis_valid = validate_config(config, schema)\n</code></pre>"},{"location":"reference/api/#event-system_1","title":"Event System","text":""},{"location":"reference/api/#publishing-events","title":"Publishing Events","text":"<pre><code>from devhub.core.events import get_event_manager\n\nevent_manager = get_event_manager()\n\n# Publish event\nevent_manager.publish(\"file_processed\", {\n    \"file_path\": \"/path/to/file.py\",\n    \"processing_time\": 1.23,\n    \"lines_formatted\": 150\n})\n</code></pre>"},{"location":"reference/api/#subscribing-to-events","title":"Subscribing to Events","text":"<pre><code>def on_file_processed(event_data):\n    print(f\"File processed: {event_data['file_path']}\")\n\n# Subscribe to event\nevent_manager.subscribe(\"file_processed\", on_file_processed)\n\n# Unsubscribe\nevent_manager.unsubscribe(\"file_processed\", on_file_processed)\n</code></pre>"},{"location":"reference/api/#error-handling","title":"Error Handling","text":""},{"location":"reference/api/#custom-exceptions","title":"Custom Exceptions","text":"<pre><code>from devhub.utils.exceptions import (\n    PluginError,\n    ConfigError,\n    NetworkError,\n    FormatError\n)\n\nclass MyPluginError(PluginError):\n    \"\"\"Custom plugin exception\"\"\"\n    pass\n\n# Usage\ndef risky_operation():\n    try:\n        # Some operation\n        pass\n    except Exception as e:\n        raise MyPluginError(f\"Operation failed: {e}\") from e\n</code></pre>"},{"location":"reference/api/#testing-utilities","title":"Testing Utilities","text":""},{"location":"reference/api/#plugin-testing","title":"Plugin Testing","text":"<pre><code>import unittest\nfrom devhub.testing import PluginTestCase\nfrom my_plugin import MyPlugin\n\nclass TestMyPlugin(PluginTestCase):\n    plugin_class = MyPlugin\n\n    def test_plugin_functionality(self):\n        result = self.plugin.process_data(\"test input\")\n        self.assertEqual(result, \"expected output\")\n\n    def test_configuration(self):\n        config = {\"timeout\": 60}\n        self.plugin.update_config(config)\n        self.assertEqual(self.plugin.timeout, 60)\n</code></pre>"},{"location":"reference/api/#cli-testing","title":"CLI Testing","text":"<pre><code>from click.testing import CliRunner\nfrom devhub.cli import cli\n\ndef test_cli_command():\n    runner = CliRunner()\n    result = runner.invoke(cli, ['plugin', 'command', '--option', 'value'])\n    assert result.exit_code == 0\n    assert 'expected output' in result.output\n</code></pre>"},{"location":"reference/api/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"reference/api/#timing-decorators","title":"Timing Decorators","text":"<pre><code>from devhub.utils.performance import timing, memory_usage\n\nclass MyPlugin(Plugin):\n    @timing\n    def slow_operation(self, data):\n        # Time-consuming operation\n        return processed_data\n\n    @memory_usage\n    def memory_intensive_operation(self, large_data):\n        # Memory-intensive operation\n        return result\n</code></pre>"},{"location":"reference/api/#profiling","title":"Profiling","text":"<pre><code>from devhub.utils.profiling import profile\n\n@profile\ndef complex_function():\n    # Complex operation to profile\n    pass\n</code></pre>"},{"location":"reference/api/#caching","title":"Caching","text":""},{"location":"reference/api/#result-caching","title":"Result Caching","text":"<pre><code>from devhub.utils.cache import cached\n\nclass MyPlugin(Plugin):\n    @cached(ttl=300)  # Cache for 5 minutes\n    def expensive_api_call(self, endpoint):\n        # Expensive operation\n        return api_response\n</code></pre>"},{"location":"reference/api/#async-support","title":"Async Support","text":""},{"location":"reference/api/#async-plugin-operations","title":"Async Plugin Operations","text":"<pre><code>import asyncio\nfrom devhub.core.plugin_manager import AsyncPlugin\n\nclass MyAsyncPlugin(AsyncPlugin):\n    async def async_operation(self, data):\n        \"\"\"Async operation\"\"\"\n        result = await self.fetch_data(data)\n        return result\n\n    async def fetch_data(self, url):\n        \"\"\"Fetch data asynchronously\"\"\"\n        # Implementation\n        pass\n</code></pre>"},{"location":"reference/api/#security-utilities","title":"Security Utilities","text":""},{"location":"reference/api/#input-validation","title":"Input Validation","text":"<pre><code>from devhub.utils.security import sanitize_path, validate_url\n\ndef safe_file_operation(file_path):\n    # Sanitize file path\n    safe_path = sanitize_path(file_path)\n\n    # Validate URL\n    if not validate_url(url):\n        raise ValueError(\"Invalid URL\")\n</code></pre>"},{"location":"reference/api/#secret-management","title":"Secret Management","text":"<pre><code>from devhub.utils.secrets import get_secret, set_secret\n\n# Store secret securely\nset_secret(\"api_key\", \"secret-value\")\n\n# Retrieve secret\napi_key = get_secret(\"api_key\")\n</code></pre>"},{"location":"reference/api/#data-processing","title":"Data Processing","text":""},{"location":"reference/api/#data-transformation","title":"Data Transformation","text":"<pre><code>from devhub.utils.data import transform_json, validate_schema\n\n# Transform JSON data\ntransformed = transform_json(data, {\n    \"name\": \"$.user.full_name\",\n    \"email\": \"$.user.email\",\n    \"posts\": \"$.posts[*].title\"\n})\n\n# Validate against schema\nis_valid = validate_schema(data, schema)\n</code></pre>"},{"location":"reference/api/#file-operations","title":"File Operations","text":""},{"location":"reference/api/#safe-file-handling","title":"Safe File Handling","text":"<pre><code>from devhub.utils.files import safe_read, safe_write, atomic_write\n\n# Safe file operations\ncontent = safe_read(\"/path/to/file.txt\")\nsafe_write(\"/path/to/output.txt\", content)\n\n# Atomic write (prevents corruption)\nwith atomic_write(\"/path/to/important.txt\") as f:\n    f.write(content)\n</code></pre>"},{"location":"reference/api/#network-utilities","title":"Network Utilities","text":""},{"location":"reference/api/#http-client","title":"HTTP Client","text":"<pre><code>from devhub.utils.http import HTTPClient\n\nclient = HTTPClient(\n    timeout=30,\n    retries=3,\n    headers={\"User-Agent\": \"DevHub\"}\n)\n\n# Make request\nresponse = client.get(\"https://api.example.com/data\")\njson_data = response.json()\n</code></pre>"},{"location":"reference/api/#logging","title":"Logging","text":""},{"location":"reference/api/#structured-logging","title":"Structured Logging","text":"<pre><code>from devhub.utils.logger import get_logger\n\nlogger = get_logger(\"my_plugin\")\n\n# Structured logging\nlogger.info(\"Processing file\", extra={\n    \"file_path\": \"/path/to/file.py\",\n    \"file_size\": 1024,\n    \"processing_time\": 1.23\n})\n</code></pre>"},{"location":"reference/api/#example-complete-plugin-implementation","title":"Example: Complete Plugin Implementation","text":"<pre><code>import click\nimport asyncio\nfrom pathlib import Path\nfrom typing import List, Dict, Any\nfrom devhub.core.plugin_manager import Plugin\nfrom devhub.utils.logger import get_logger\nfrom devhub.utils.exceptions import PluginError\nfrom devhub.utils.cache import cached\n\nclass ExamplePlugin(Plugin):\n    \"\"\"Example plugin demonstrating API usage\"\"\"\n\n    name = \"example\"\n    description = \"Example plugin for API demonstration\"\n    version = \"1.0.0\"\n    author = \"DevHub Team\"\n\n    def get_config_schema(self) -&gt; Dict[str, Any]:\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"enabled\": {\"type\": \"boolean\", \"default\": True},\n                \"timeout\": {\"type\": \"integer\", \"default\": 30},\n                \"cache_ttl\": {\"type\": \"integer\", \"default\": 300}\n            }\n        }\n\n    def initialize(self):\n        self.logger = get_logger(f\"plugin.{self.name}\")\n        config = self.get_config()\n        self.timeout = config.get('timeout', 30)\n        self.cache_ttl = config.get('cache_ttl', 300)\n\n        # Subscribe to events\n        self.subscribe_event('file_processed', self.on_file_processed)\n\n    def register_commands(self, cli_group):\n        @cli_group.group(name=self.name)\n        def example():\n            \"\"\"Example plugin commands\"\"\"\n            pass\n\n        @example.command()\n        @click.argument('files', nargs=-1, type=click.Path(exists=True))\n        @click.option('--output', type=click.Path(), help='Output file')\n        def process(files, output):\n            \"\"\"Process files\"\"\"\n            try:\n                results = self.process_files(files)\n\n                if output:\n                    Path(output).write_text(str(results))\n                else:\n                    click.echo(results)\n\n            except Exception as e:\n                raise PluginError(f\"Processing failed: {e}\")\n\n    @cached(ttl=300)\n    def process_files(self, files: List[str]) -&gt; Dict[str, Any]:\n        \"\"\"Process multiple files with caching\"\"\"\n        results = {}\n\n        for file_path in files:\n            self.logger.info(f\"Processing {file_path}\")\n            result = self.process_single_file(file_path)\n            results[file_path] = result\n\n            # Publish event\n            self.publish_event('file_processed', {\n                'file_path': file_path,\n                'result': result\n            })\n\n        return results\n\n    def process_single_file(self, file_path: str) -&gt; Dict[str, Any]:\n        \"\"\"Process a single file\"\"\"\n        path = Path(file_path)\n        return {\n            'size': path.stat().st_size,\n            'lines': len(path.read_text().splitlines()),\n            'extension': path.suffix\n        }\n\n    def on_file_processed(self, event_data: Dict[str, Any]):\n        \"\"\"Handle file processed event\"\"\"\n        self.logger.debug(f\"File processed: {event_data['file_path']}\")\n\n    def cleanup(self):\n        \"\"\"Cleanup resources\"\"\"\n        self.unsubscribe_event('file_processed', self.on_file_processed)\n        self.logger.info(\"Plugin cleanup completed\")\n</code></pre> <p>For the complete API documentation, see the source code and API examples.</p>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>Complete command-line interface reference for DevHub.</p>"},{"location":"reference/cli/#global-options","title":"Global Options","text":"<pre><code>devhub [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS] [ARGS]\n</code></pre>"},{"location":"reference/cli/#global-options_1","title":"Global Options","text":"Option Description <code>--version</code> Show DevHub version <code>--help</code> Show help message <code>--config PATH</code> Use custom configuration file <code>--verbose, -v</code> Enable verbose output <code>--quiet, -q</code> Suppress output <code>--debug</code> Enable debug mode <code>--no-color</code> Disable colored output"},{"location":"reference/cli/#core-commands","title":"Core Commands","text":""},{"location":"reference/cli/#configuration-management","title":"Configuration Management","text":"<pre><code># Configuration commands\ndevhub config init                    # Initialize configuration\ndevhub config show                    # Show current configuration\ndevhub config get KEY                 # Get configuration value\ndevhub config set KEY VALUE           # Set configuration value\ndevhub config unset KEY               # Remove configuration value\ndevhub config reset                   # Reset to defaults\ndevhub config validate                # Validate configuration\n</code></pre>"},{"location":"reference/cli/#plugin-management","title":"Plugin Management","text":"<pre><code># Plugin commands\ndevhub plugin list                    # List available plugins\ndevhub plugin info PLUGIN             # Show plugin information\ndevhub plugin enable PLUGIN           # Enable plugin\ndevhub plugin disable PLUGIN          # Disable plugin\ndevhub plugin update [PLUGIN]         # Update plugins\n</code></pre>"},{"location":"reference/cli/#format-plugin","title":"Format Plugin","text":"<pre><code># Code formatting\ndevhub format code [OPTIONS] [FILES...]\n\nOptions:\n  --lang TEXT              Language to format (python, javascript, etc.)\n  --line-length INTEGER    Maximum line length\n  --dry-run               Show changes without applying\n  --check                 Check if formatting needed\n  --diff                  Show differences\n  --backup                Create backup before formatting\n  --recursive             Format directories recursively\n</code></pre>"},{"location":"reference/cli/#api-plugin","title":"API Plugin","text":"<pre><code># HTTP API testing\ndevhub api test [OPTIONS]\n\nOptions:\n  --url TEXT              URL to test\n  --method TEXT           HTTP method (GET, POST, PUT, DELETE)\n  --data TEXT             Request body data\n  --header TEXT           HTTP headers (can be used multiple times)\n  --auth TEXT             Authentication type (bearer, basic, apikey)\n  --token TEXT            Authentication token\n  --timeout INTEGER       Request timeout in seconds\n  --format TEXT           Response format (json, raw)\n</code></pre> <pre><code># API benchmarking\ndevhub api benchmark [OPTIONS]\n\nOptions:\n  --url TEXT              URL to benchmark\n  --requests INTEGER      Number of requests\n  --concurrency INTEGER   Concurrent requests\n  --duration TEXT         Test duration (e.g., 30s, 5m)\n  --output PATH          Save results to file\n</code></pre>"},{"location":"reference/cli/#security-plugin","title":"Security Plugin","text":"<pre><code># Password generation\ndevhub security password [OPTIONS]\n\nOptions:\n  --length INTEGER        Password length (default: 16)\n  --count INTEGER         Number of passwords (default: 1)\n  --no-symbols           Exclude symbols\n  --no-numbers           Exclude numbers\n  --no-uppercase         Exclude uppercase letters\n  --no-lowercase         Exclude lowercase letters\n</code></pre> <pre><code># Hash generation\ndevhub security hash [OPTIONS] TEXT\n\nOptions:\n  --algorithm TEXT        Hash algorithm (md5, sha1, sha256, sha512)\n  --file PATH            Hash file contents instead of text\n</code></pre>"},{"location":"reference/cli/#git-plugin","title":"Git Plugin","text":"<pre><code># Branch management\ndevhub git clean-branches [OPTIONS]\n\nOptions:\n  --merged               Only clean merged branches\n  --dry-run              Preview without deleting\n  --preserve TEXT        Branches to preserve (comma-separated)\n  --force                Force deletion without confirmation\n</code></pre> <pre><code># Repository analysis\ndevhub git stats [OPTIONS]\n\nOptions:\n  --since TEXT           Analyze commits since date\n  --author TEXT          Filter by author\n  --format TEXT          Output format (table, json, csv)\n</code></pre>"},{"location":"reference/cli/#data-plugin","title":"Data Plugin","text":"<pre><code># Data conversion\ndevhub data convert FORMAT1 FORMAT2 [OPTIONS] INPUT\n\nOptions:\n  --output PATH          Output file path\n  --indent INTEGER       Indentation for formatted output\n  --delimiter TEXT       Delimiter for CSV files\n  --encoding TEXT        File encoding (default: utf-8)\n</code></pre>"},{"location":"reference/cli/#system-plugin","title":"System Plugin","text":"<pre><code># System monitoring\ndevhub system monitor [OPTIONS]\n\nOptions:\n  --interval INTEGER     Monitoring interval in seconds\n  --duration INTEGER     Monitoring duration in seconds\n  --output PATH          Save metrics to file\n  --format TEXT          Output format (table, json, csv)\n</code></pre> <pre><code># Process management\ndevhub system processes [OPTIONS]\n\nOptions:\n  --sort TEXT            Sort by (cpu, memory, name, pid)\n  --filter TEXT          Filter by process name\n  --top INTEGER          Show top N processes\n</code></pre>"},{"location":"reference/cli/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 General error 2 Configuration error 3 Plugin error 4 Network error 5 Format error 126 Permission denied 127 Command not found"},{"location":"reference/cli/#environment-variables","title":"Environment Variables","text":"Variable Description <code>DEVHUB_CONFIG_PATH</code> Path to configuration file <code>DEVHUB_PLUGIN_PATH</code> Additional plugin search paths <code>DEVHUB_LOG_LEVEL</code> Logging level (DEBUG, INFO, WARNING, ERROR) <code>DEVHUB_NO_COLOR</code> Disable colored output <code>DEVHUB_API_TOKEN</code> Default API token"},{"location":"reference/cli/#configuration-file-locations","title":"Configuration File Locations","text":"<p>DevHub searches for configuration files in this order:</p> <ol> <li>Command-line <code>--config</code> option</li> <li><code>DEVHUB_CONFIG_PATH</code> environment variable</li> <li>Current directory: <code>.devhub.toml</code>, <code>devhub.toml</code>, etc.</li> <li>Parent directories (walking up the tree)</li> <li>Home directory: <code>~/.devhub/config.toml</code></li> <li>System directory: <code>/etc/devhub/config.toml</code></li> </ol>"},{"location":"reference/cli/#shell-completion","title":"Shell Completion","text":"<p>Enable shell completion for better CLI experience:</p> <pre><code># Bash\neval \"$(_DEVHUB_COMPLETE=bash_source devhub)\" &gt;&gt; ~/.bashrc\n\n# Zsh\neval \"$(_DEVHUB_COMPLETE=zsh_source devhub)\" &gt;&gt; ~/.zshrc\n\n# Fish\n_DEVHUB_COMPLETE=fish_source devhub &gt; ~/.config/fish/completions/devhub.fish\n</code></pre>"},{"location":"reference/cli/#examples","title":"Examples","text":""},{"location":"reference/cli/#common-workflows","title":"Common Workflows","text":"<pre><code># Format Python code and check for issues\ndevhub format code --lang python --check src/\n\n# Test API with authentication\ndevhub api test --url https://api.github.com/user \\\n  --auth bearer --token \"$GITHUB_TOKEN\"\n\n# Generate secure password and copy to clipboard\ndevhub security password --length 20 | pbcopy\n\n# Clean up old Git branches\ndevhub git clean-branches --merged --preserve main,develop\n\n# Convert JSON to CSV\ndevhub data convert json csv data.json --output data.csv\n\n# Monitor system for 5 minutes\ndevhub system monitor --duration 300 --interval 10\n</code></pre>"},{"location":"reference/cli/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Chain commands with pipes\ndevhub api test --url https://api.github.com/users/octocat | \\\n  jq '.public_repos' | \\\n  devhub data convert json csv --output repos.csv\n\n# Batch process files\nfind . -name \"*.py\" | xargs devhub format code --lang python\n\n# Configuration management\ndevhub config set format.python.line_length 100\ndevhub config set api.default_timeout 60\ndevhub config validate\n</code></pre> <p>For more examples, see the User Guide.</p>"},{"location":"reference/config/","title":"Configuration Reference","text":"<p>Comprehensive reference for DevHub configuration options.</p>"},{"location":"reference/config/#configuration-file-formats","title":"Configuration File Formats","text":"<p>DevHub supports TOML (recommended), YAML, and JSON configuration formats:</p> <pre><code># devhub.toml (recommended)\n[global]\nlog_level = \"INFO\"\ncolored_output = true\n\n[plugins]\nenabled = [\"format\", \"api\", \"security\"]\n\n[format]\nline_length = 88\nauto_detect = true\n</code></pre> <pre><code># devhub.yaml\nglobal:\n  log_level: INFO\n  colored_output: true\n\nplugins:\n  enabled:\n    - format\n    - api\n    - security\n\nformat:\n  line_length: 88\n  auto_detect: true\n</code></pre>"},{"location":"reference/config/#global-configuration","title":"Global Configuration","text":""},{"location":"reference/config/#core-settings","title":"Core Settings","text":"<pre><code>[global]\n# Logging configuration\nlog_level = \"INFO\"              # DEBUG, INFO, WARNING, ERROR\nlog_file = \"~/.devhub/logs/devhub.log\"\ncolored_output = true           # Enable colored terminal output\nprogress_bars = true            # Show progress bars\n\n# Performance settings\nmax_workers = 4                 # Maximum worker threads\ntimeout = 30                    # Default operation timeout\ncache_enabled = true            # Enable result caching\ncache_ttl = 3600               # Cache TTL in seconds\n</code></pre>"},{"location":"reference/config/#plugin-management","title":"Plugin Management","text":"<pre><code>[plugins]\n# Plugin enablement\nenabled = [\"format\", \"api\", \"security\", \"git\"]\ndisabled = [\"experimental\"]\n\n# Plugin settings\nauto_update = false             # Auto-update plugins\nupdate_check_interval = 86400   # Check for updates (seconds)\nplugin_paths = [               # Additional plugin search paths\n    \"~/.devhub/plugins\",\n    \"/opt/devhub/plugins\"\n]\n</code></pre>"},{"location":"reference/config/#plugin-specific-configuration","title":"Plugin-Specific Configuration","text":""},{"location":"reference/config/#format-plugin","title":"Format Plugin","text":"<pre><code>[format]\n# Global formatting options\nenabled = true\nline_length = 88\nauto_detect = true              # Auto-detect file types\nbackup = false                  # Create backups before formatting\ndry_run = false                # Default to dry-run mode\nrecursive = true               # Format directories recursively\n\n# Language-specific settings\n[format.python]\nenabled = true\nformatter = \"black\"             # black, autopep8, yapf\nline_length = 88\ntarget_version = [\"py38\", \"py39\", \"py310\"]\nskip_string_normalization = false\nskip_magic_trailing_comma = false\n\n# isort configuration\nisort_enabled = true\nisort_profile = \"black\"\nisort_line_length = 88\nisort_multi_line_output = 3\n\n# Additional formatter arguments\nblack_args = [\"--fast\"]\nautopep8_args = [\"--aggressive\"]\nyapf_args = [\"--style=pep8\"]\n\n[format.javascript]\nenabled = true\nformatter = \"prettier\"\nprint_width = 80\ntab_width = 2\nuse_tabs = false\nsemicolons = true\nsingle_quote = false\ntrailing_comma = \"es5\"\nbracket_spacing = true\narrow_parens = \"always\"\n\n# ESLint integration\neslint_enabled = false\neslint_fix = false\n\n[format.typescript]\nenabled = true\n# Inherits from javascript configuration\nextends = \"format.javascript\"\n\n[format.go]\nenabled = true\nformatter = \"gofmt\"\nsimplify = true\nimports = true                  # Use goimports\n\n[format.rust]\nenabled = true\nformatter = \"rustfmt\"\nedition = \"2021\"\nmax_width = 100\nhard_tabs = false\ntab_spaces = 4\n\n[format.json]\nenabled = true\nindent = 2\nsort_keys = false\nensure_ascii = false\n\n[format.yaml]\nenabled = true\nindent = 2\nwidth = 80\ndefault_flow_style = false\n</code></pre>"},{"location":"reference/config/#api-plugin","title":"API Plugin","text":"<pre><code>[api]\nenabled = true\n\n# Request defaults\ndefault_timeout = 30\nmax_retries = 3\nretry_delay = 1                 # Seconds between retries\nfollow_redirects = true\nverify_ssl = true\nuser_agent = \"DevHub/1.0.0\"\n\n# Connection settings\nconnection_pool_size = 10\nmax_redirects = 30\nkeep_alive = true\n\n# Default headers\n[api.headers]\n\"User-Agent\" = \"DevHub API Client\"\n\"Accept\" = \"application/json\"\n\"Accept-Encoding\" = \"gzip, deflate\"\n\n# Authentication defaults\n[api.auth]\ntype = \"bearer\"                 # bearer, basic, apikey, none\ntoken = \"${API_TOKEN}\"          # Environment variable reference\nusername = \"\"\npassword = \"\"\n\n# API key settings\napi_key_header = \"X-API-Key\"\napi_key_param = \"api_key\"\n\n# Benchmarking defaults\n[api.benchmark]\ndefault_requests = 100\ndefault_concurrency = 10\nmax_requests = 10000\nmax_concurrency = 100\nwarmup_requests = 10\n\n# Output settings\n[api.output]\nformat = \"json\"                 # json, yaml, table, raw\npretty_print = true\nshow_headers = true\nshow_timing = true\nshow_status = true\n</code></pre>"},{"location":"reference/config/#security-plugin","title":"Security Plugin","text":"<pre><code>[security]\nenabled = true\n\n# Password generation\n[security.password]\nlength = 16\ninclude_uppercase = true\ninclude_lowercase = true\ninclude_numbers = true\ninclude_symbols = true\nexclude_similar = true          # Exclude 0, O, l, 1, etc.\nexclude_ambiguous = true        # Exclude {, }, [, ], etc.\ncustom_symbols = \"!@#$%^&amp;*\"\nmin_entropy = 60               # Minimum entropy bits\n\n# Hash settings\n[security.hash]\ndefault_algorithm = \"sha256\"    # md5, sha1, sha256, sha512\nsalt_length = 32\niterations = 100000            # For PBKDF2\n\n# Encryption settings\n[security.encryption]\ndefault_algorithm = \"AES-256-GCM\"\nkey_derivation = \"PBKDF2\"\niterations = 100000\nsalt_length = 32\n\n# Security scanning\n[security.scan]\nenabled = true\ncheck_secrets = true\ncheck_permissions = true\nexclude_patterns = [\n    \"*.pyc\",\n    \"__pycache__\",\n    \".git\",\n    \"node_modules\"\n]\n</code></pre>"},{"location":"reference/config/#git-plugin","title":"Git Plugin","text":"<pre><code>[git]\nenabled = true\n\n# Branch management\n[git.clean]\npreserve_branches = [\"main\", \"master\", \"develop\", \"staging\", \"production\"]\nconfirm_before_delete = true\nremote_tracking = true\nforce_delete = false\n\n# Commit settings\n[git.commit]\nconventional_commits = true\nauto_sign = false\ngpg_key_id = \"\"\ntemplate_file = \"\"\n\n# Analysis settings\n[git.analysis]\ndefault_since = \"30 days ago\"\ninclude_merges = false\nauthor_aliases = {}             # Map of author email aliases\n\n# Hook settings\n[git.hooks]\npre_commit_format = true\npre_commit_lint = false\npre_push_test = false\ncommit_msg_validate = true\n</code></pre>"},{"location":"reference/config/#data-plugin","title":"Data Plugin","text":"<pre><code>[data]\nenabled = true\n\n# CSV settings\n[data.csv]\ndelimiter = \",\"\nquote_char = '\"'\nescape_char = \"\\\\\"\nencoding = \"utf-8\"\nskip_blank_lines = true\nheader = true\n\n# JSON settings\n[data.json]\nindent = 2\nsort_keys = false\nensure_ascii = false\nseparators = [\",\", \":\"]\n\n# YAML settings\n[data.yaml]\ndefault_flow_style = false\nindent = 2\nwidth = 80\nallow_unicode = true\n\n# XML settings\n[data.xml]\nencoding = \"utf-8\"\npretty_print = true\ndeclaration = true\n</code></pre>"},{"location":"reference/config/#system-plugin","title":"System Plugin","text":"<pre><code>[system]\nenabled = true\n\n# Monitoring settings\n[system.monitor]\ndefault_interval = 5            # Seconds\ndefault_duration = 60          # Seconds\ninclude_processes = true\ninclude_network = true\ninclude_disk = true\ninclude_memory = true\ninclude_cpu = true\n\n# Process settings\n[system.process]\nsort_by = \"cpu\"                # cpu, memory, name, pid\nshow_threads = false\nfilter_system = false\nupdate_interval = 1\n\n# Alert settings\n[system.alerts]\nenabled = false\ncpu_threshold = 80             # Percentage\nmemory_threshold = 90          # Percentage\ndisk_threshold = 95            # Percentage\nwebhook_url = \"\"\nemail_notifications = false\n</code></pre>"},{"location":"reference/config/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"reference/config/#development-environment","title":"Development Environment","text":"<pre><code># .devhub.toml (project root)\n[global]\nlog_level = \"DEBUG\"\ncolored_output = true\n\n[format]\nbackup = true                  # Create backups in development\ndry_run = false\n\n[api]\nbase_url = \"http://localhost:3000\"\nverify_ssl = false            # For self-signed certificates\n\n[git]\nconventional_commits = true\npre_commit_format = true\n</code></pre>"},{"location":"reference/config/#production-environment","title":"Production Environment","text":"<pre><code># Production configuration\n[global]\nlog_level = \"WARNING\"\nlog_file = \"/var/log/devhub/devhub.log\"\n\n[format]\nbackup = false                # No backups in production\ncheck_only = true            # Only check, don't modify\n\n[api]\nverify_ssl = true\ntimeout = 10                 # Shorter timeout\nmax_retries = 1\n\n[security]\npassword.length = 32         # Longer passwords\nencryption.iterations = 200000\n</code></pre>"},{"location":"reference/config/#configuration-inheritance","title":"Configuration Inheritance","text":"<p>Configuration is merged in this order (later values override earlier ones):</p> <ol> <li>Default values</li> <li>System configuration (<code>/etc/devhub/config.toml</code>)</li> <li>User configuration (<code>~/.devhub/config.toml</code>)</li> <li>Project configuration (<code>.devhub.toml</code> in project root)</li> <li>Environment variables (<code>DEVHUB_*</code>)</li> <li>Command-line arguments</li> </ol>"},{"location":"reference/config/#environment-variable-mapping","title":"Environment Variable Mapping","text":"<p>All configuration options can be set via environment variables:</p> <pre><code># Global settings\nexport DEVHUB_GLOBAL_LOG_LEVEL=DEBUG\nexport DEVHUB_GLOBAL_COLORED_OUTPUT=true\n\n# Plugin settings\nexport DEVHUB_FORMAT_LINE_LENGTH=100\nexport DEVHUB_API_DEFAULT_TIMEOUT=60\nexport DEVHUB_SECURITY_PASSWORD_LENGTH=20\n\n# Nested settings (use double underscore)\nexport DEVHUB_FORMAT_PYTHON__FORMATTER=black\nexport DEVHUB_API_AUTH__TOKEN=your-token-here\n</code></pre>"},{"location":"reference/config/#configuration-validation","title":"Configuration Validation","text":"<p>DevHub validates configuration using JSON Schema:</p> <pre><code># Validate current configuration\ndevhub config validate\n\n# Validate specific file\ndevhub config validate --file custom-config.toml\n\n# Show validation schema\ndevhub config schema\n</code></pre>"},{"location":"reference/config/#configuration-examples","title":"Configuration Examples","text":""},{"location":"reference/config/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code># Minimal .devhub.toml\n[plugins]\nenabled = [\"format\"]\n\n[format]\nline_length = 88\n</code></pre>"},{"location":"reference/config/#complete-configuration","title":"Complete Configuration","text":"<p>See examples/complete-config.toml for a comprehensive configuration example.</p>"},{"location":"reference/config/#migration","title":"Migration","text":""},{"location":"reference/config/#from-v1x-to-v2x","title":"From v1.x to v2.x","text":"<pre><code># Migrate old configuration\ndevhub config migrate --from-version 1.x\n\n# Check for deprecated options\ndevhub config check-deprecated\n</code></pre> <p>For more configuration examples, visit: DevHub Configuration Examples</p>"},{"location":"user-guide/api/","title":"API Testing","text":"<p>DevHub's API plugin provides powerful HTTP client capabilities for testing, debugging, and benchmarking APIs with beautiful, informative output.</p>"},{"location":"user-guide/api/#overview","title":"\ud83c\udfaf Overview","text":"<p>The API plugin offers:</p> <ul> <li>HTTP client with support for all methods</li> <li>Beautiful response formatting with syntax highlighting</li> <li>Request/response timing and performance metrics</li> <li>Authentication support (Bearer, Basic, API Key)</li> <li>Benchmarking tools for load testing</li> <li>Response validation and testing</li> <li>Request templates and reusable configurations</li> </ul>"},{"location":"user-guide/api/#basic-usage","title":"\ud83d\ude80 Basic Usage","text":""},{"location":"user-guide/api/#simple-requests","title":"Simple Requests","text":"<pre><code># GET request\ndevhub api test --url https://api.github.com/users/octocat\n\n# POST with data\ndevhub api test --url https://httpbin.org/post \\\n  --method POST \\\n  --data '{\"name\": \"John\", \"email\": \"john@example.com\"}'\n\n# PUT request\ndevhub api test --url https://api.example.com/users/123 \\\n  --method PUT \\\n  --data '{\"name\": \"Jane Doe\"}'\n\n# DELETE request\ndevhub api test --url https://api.example.com/users/123 \\\n  --method DELETE\n</code></pre>"},{"location":"user-guide/api/#request-headers","title":"Request Headers","text":"<pre><code># Add custom headers\ndevhub api test --url https://api.example.com \\\n  --header \"Authorization: Bearer token123\" \\\n  --header \"Content-Type: application/json\" \\\n  --header \"User-Agent: DevHub/1.0\"\n\n# Multiple headers from file\ndevhub api test --url https://api.example.com \\\n  --headers-file headers.json\n</code></pre>"},{"location":"user-guide/api/#authentication","title":"\ud83d\udd10 Authentication","text":""},{"location":"user-guide/api/#bearer-token","title":"Bearer Token","text":"<pre><code># Bearer token authentication\ndevhub api test --url https://api.github.com/user \\\n  --auth bearer \\\n  --token \"ghp_xxxxxxxxxxxxxxxxxxxx\"\n\n# Using environment variable\nexport API_TOKEN=\"your-token-here\"\ndevhub api test --url https://api.github.com/user \\\n  --auth bearer \\\n  --token \"$API_TOKEN\"\n</code></pre>"},{"location":"user-guide/api/#basic-authentication","title":"Basic Authentication","text":"<pre><code># Basic auth with username/password\ndevhub api test --url https://api.example.com/protected \\\n  --auth basic \\\n  --username \"user\" \\\n  --password \"pass\"\n\n# Basic auth with token\ndevhub api test --url https://api.example.com/protected \\\n  --auth basic \\\n  --token \"dXNlcjpwYXNz\"  # base64 encoded\n</code></pre>"},{"location":"user-guide/api/#api-key-authentication","title":"API Key Authentication","text":"<pre><code># API key in header\ndevhub api test --url https://api.example.com \\\n  --auth apikey \\\n  --api-key \"your-api-key\" \\\n  --api-key-header \"X-API-Key\"\n\n# API key in query parameter\ndevhub api test --url https://api.example.com \\\n  --auth apikey \\\n  --api-key \"your-api-key\" \\\n  --api-key-param \"key\"\n</code></pre>"},{"location":"user-guide/api/#response-handling","title":"\ud83d\udcca Response Handling","text":""},{"location":"user-guide/api/#response-formatting","title":"Response Formatting","text":"<pre><code># Pretty print JSON response\ndevhub api test --url https://api.github.com/users/octocat \\\n  --format json\n\n# Raw response\ndevhub api test --url https://api.example.com \\\n  --format raw\n\n# Headers only\ndevhub api test --url https://api.example.com \\\n  --headers-only\n\n# Status code only\ndevhub api test --url https://api.example.com \\\n  --status-only\n</code></pre>"},{"location":"user-guide/api/#response-validation","title":"Response Validation","text":"<pre><code># Expect specific status code\ndevhub api test --url https://api.example.com \\\n  --expect-status 200\n\n# Expect response time under threshold\ndevhub api test --url https://api.example.com \\\n  --expect-time 1000  # milliseconds\n\n# Validate JSON schema\ndevhub api test --url https://api.example.com \\\n  --validate-schema schema.json\n\n# Check response contains text\ndevhub api test --url https://api.example.com \\\n  --expect-text \"success\"\n</code></pre>"},{"location":"user-guide/api/#benchmarking","title":"\ud83d\udcc8 Benchmarking","text":""},{"location":"user-guide/api/#load-testing","title":"Load Testing","text":"<pre><code># Basic benchmark\ndevhub api benchmark --url https://api.example.com \\\n  --requests 100 \\\n  --concurrency 10\n\n# Extended benchmark with custom duration\ndevhub api benchmark --url https://api.example.com \\\n  --duration 60s \\\n  --concurrency 5\n\n# Ramp-up testing\ndevhub api benchmark --url https://api.example.com \\\n  --requests 1000 \\\n  --concurrency 50 \\\n  --ramp-up 30s\n</code></pre>"},{"location":"user-guide/api/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Detailed performance metrics\ndevhub api benchmark --url https://api.example.com \\\n  --requests 100 \\\n  --metrics detailed\n\n# Export results to file\ndevhub api benchmark --url https://api.example.com \\\n  --requests 100 \\\n  --output results.json\n\n# CSV export for analysis\ndevhub api benchmark --url https://api.example.com \\\n  --requests 100 \\\n  --output results.csv \\\n  --format csv\n</code></pre>"},{"location":"user-guide/api/#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"user-guide/api/#request-templates","title":"Request Templates","text":"<p>Create reusable request templates:</p> <pre><code>// api-templates.json\n{\n  \"github_user\": {\n    \"url\": \"https://api.github.com/users/{username}\",\n    \"method\": \"GET\",\n    \"headers\": {\n      \"Accept\": \"application/vnd.github.v3+json\"\n    }\n  },\n  \"create_post\": {\n    \"url\": \"https://jsonplaceholder.typicode.com/posts\",\n    \"method\": \"POST\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"data\": {\n      \"title\": \"{title}\",\n      \"body\": \"{body}\",\n      \"userId\": \"{user_id}\"\n    }\n  }\n}\n</code></pre> <pre><code># Use template\ndevhub api test --template github_user \\\n  --var username=octocat\n\n# Use template with multiple variables\ndevhub api test --template create_post \\\n  --var title=\"Test Post\" \\\n  --var body=\"This is a test\" \\\n  --var user_id=1\n</code></pre>"},{"location":"user-guide/api/#environment-management","title":"Environment Management","text":"<pre><code># Define environments\ndevhub api env create development \\\n  --base-url \"http://localhost:3000\" \\\n  --auth-token \"dev-token-123\"\n\ndevhub api env create production \\\n  --base-url \"https://api.example.com\" \\\n  --auth-token \"$PROD_TOKEN\"\n\n# Use environment\ndevhub api test --env development \\\n  --endpoint \"/users\"\n\n# List environments\ndevhub api env list\n\n# Switch default environment\ndevhub api env use production\n</code></pre>"},{"location":"user-guide/api/#configuration","title":"\ud83d\udcdd Configuration","text":""},{"location":"user-guide/api/#global-configuration","title":"Global Configuration","text":"<pre><code>[api]\nenabled = true\ndefault_timeout = 30\nmax_retries = 3\nfollow_redirects = true\nverify_ssl = true\nuser_agent = \"DevHub/1.0.0\"\n\n[api.headers]\n# Default headers for all requests\n\"User-Agent\" = \"DevHub API Client\"\n\"Accept\" = \"application/json\"\n\n[api.auth]\n# Default authentication\ntype = \"bearer\"\ntoken = \"${API_TOKEN}\"\n\n[api.benchmark]\ndefault_requests = 100\ndefault_concurrency = 10\nmax_requests = 1000\nmax_concurrency = 50\n</code></pre>"},{"location":"user-guide/api/#project-configuration","title":"Project Configuration","text":"<pre><code># .devhub.toml\n[api]\nbase_url = \"http://localhost:3000\"\ndefault_timeout = 10\n\n[api.environments.development]\nbase_url = \"http://localhost:3000\"\nauth_token = \"dev-token\"\n\n[api.environments.staging]\nbase_url = \"https://staging-api.example.com\"\nauth_token = \"${STAGING_TOKEN}\"\n\n[api.environments.production]\nbase_url = \"https://api.example.com\"\nauth_token = \"${PROD_TOKEN}\"\n</code></pre>"},{"location":"user-guide/api/#testing-workflows","title":"\ud83e\uddea Testing Workflows","text":""},{"location":"user-guide/api/#api-testing-suite","title":"API Testing Suite","text":"<pre><code># Test multiple endpoints\ndevhub api test-suite tests/api-tests.yaml\n\n# Run specific test group\ndevhub api test-suite tests/api-tests.yaml \\\n  --group auth\n\n# Generate test report\ndevhub api test-suite tests/api-tests.yaml \\\n  --report test-results.html\n</code></pre> <p>Example test suite: <pre><code># tests/api-tests.yaml\nname: \"API Test Suite\"\nbase_url: \"https://api.example.com\"\n\ntests:\n  - name: \"Get user profile\"\n    endpoint: \"/users/me\"\n    method: GET\n    auth:\n      type: bearer\n      token: \"${API_TOKEN}\"\n    expect:\n      status: 200\n      schema: \"schemas/user.json\"\n\n  - name: \"Create new post\"\n    endpoint: \"/posts\"\n    method: POST\n    data:\n      title: \"Test Post\"\n      content: \"Test content\"\n    expect:\n      status: 201\n      time_under: 1000\n</code></pre></p>"},{"location":"user-guide/api/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/api-tests.yml\nname: API Tests\non: [push, pull_request]\n\njobs:\n  api-tests:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install DevHub\n      run: pip install devhub-cli\n    - name: Run API tests\n      run: |\n        devhub api test-suite tests/api-tests.yaml \\\n          --env staging \\\n          --report api-results.json\n      env:\n        STAGING_TOKEN: ${{ secrets.STAGING_API_TOKEN }}\n</code></pre>"},{"location":"user-guide/api/#monitoring-and-analytics","title":"\ud83d\udcca Monitoring and Analytics","text":""},{"location":"user-guide/api/#response-time-monitoring","title":"Response Time Monitoring","text":"<pre><code># Monitor endpoint over time\ndevhub api monitor --url https://api.example.com/health \\\n  --interval 30s \\\n  --duration 1h\n\n# Alert on slow responses\ndevhub api monitor --url https://api.example.com \\\n  --alert-time 2000 \\\n  --alert-webhook \"https://hooks.slack.com/...\"\n</code></pre>"},{"location":"user-guide/api/#api-health-checks","title":"API Health Checks","text":"<pre><code># Health check with multiple endpoints\ndevhub api health-check \\\n  --url https://api.example.com/health \\\n  --url https://api.example.com/status \\\n  --timeout 5\n\n# Comprehensive health report\ndevhub api health-report \\\n  --config health-check.yaml \\\n  --output health-report.html\n</code></pre>"},{"location":"user-guide/api/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"user-guide/api/#common-issues","title":"Common Issues","text":"<p>Connection timeouts <pre><code># Increase timeout\ndevhub api test --url https://slow-api.example.com \\\n  --timeout 60\n\n# Debug connection\ndevhub api test --url https://api.example.com \\\n  --debug \\\n  --verbose\n</code></pre></p> <p>SSL certificate issues <pre><code># Disable SSL verification (not recommended for production)\ndevhub api test --url https://api.example.com \\\n  --no-verify-ssl\n\n# Use custom CA bundle\ndevhub api test --url https://api.example.com \\\n  --ca-bundle /path/to/ca-bundle.crt\n</code></pre></p> <p>Authentication failures <pre><code># Debug authentication\ndevhub api test --url https://api.example.com \\\n  --auth bearer \\\n  --token \"your-token\" \\\n  --debug-auth\n\n# Test token validity\ndevhub api validate-token \\\n  --url https://api.example.com/validate \\\n  --token \"your-token\"\n</code></pre></p>"},{"location":"user-guide/api/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Use connection pooling for multiple requests</li> <li>Enable HTTP/2 for better performance</li> <li>Use compression for large payloads</li> <li>Set appropriate timeouts</li> <li>Cache authentication tokens</li> </ul>"},{"location":"user-guide/api/#examples","title":"\ud83d\udcda Examples","text":""},{"location":"user-guide/api/#real-world-api-testing","title":"Real-world API Testing","text":"<pre><code># GitHub API example\ndevhub api test --url https://api.github.com/user \\\n  --auth bearer \\\n  --token \"$GITHUB_TOKEN\" \\\n  --expect-status 200\n\n# REST API CRUD operations\ndevhub api test --url https://jsonplaceholder.typicode.com/posts \\\n  --method POST \\\n  --data '{\"title\": \"Test\", \"body\": \"Content\", \"userId\": 1}' \\\n  --expect-status 201\n\n# GraphQL API testing\ndevhub api test --url https://api.github.com/graphql \\\n  --method POST \\\n  --auth bearer \\\n  --token \"$GITHUB_TOKEN\" \\\n  --data '{\"query\": \"{ viewer { login } }\"}'\n</code></pre> <p>For more examples, visit: DevHub API Examples</p>"},{"location":"user-guide/data/","title":"Data Conversion","text":"<p>DevHub's data plugin provides seamless conversion between popular data formats with validation and transformation capabilities.</p>"},{"location":"user-guide/data/#format-conversion","title":"\ud83d\udd04 Format Conversion","text":""},{"location":"user-guide/data/#json-csv","title":"JSON \u2194 CSV","text":"<pre><code># JSON to CSV\ndevhub data convert json2csv data.json --output data.csv\n\n# CSV to JSON\ndevhub data convert csv2json data.csv --output data.json\n\n# With custom delimiter\ndevhub data convert csv2json data.tsv --delimiter '\\t'\n</code></pre>"},{"location":"user-guide/data/#json-yaml","title":"JSON \u2194 YAML","text":"<pre><code># JSON to YAML\ndevhub data convert json2yaml config.json --output config.yaml\n\n# YAML to JSON\ndevhub data convert yaml2json config.yaml --output config.json\n\n# Pretty print\ndevhub data convert json2yaml data.json --pretty\n</code></pre>"},{"location":"user-guide/data/#json-xml","title":"JSON \u2194 XML","text":"<pre><code># JSON to XML\ndevhub data convert json2xml data.json --output data.xml\n\n# XML to JSON\ndevhub data convert xml2json data.xml --output data.json\n\n# Custom root element\ndevhub data convert json2xml data.json --root-element \"records\"\n</code></pre>"},{"location":"user-guide/data/#data-processing","title":"\ud83d\udcca Data Processing","text":""},{"location":"user-guide/data/#validation","title":"Validation","text":"<pre><code># Validate JSON schema\ndevhub data validate --schema schema.json data.json\n\n# Validate CSV format\ndevhub data validate --format csv data.csv\n\n# Batch validation\ndevhub data validate --recursive data/\n</code></pre>"},{"location":"user-guide/data/#transformation","title":"Transformation","text":"<pre><code># Filter JSON data\ndevhub data filter --query '.users[] | select(.age &gt; 18)' users.json\n\n# Transform data structure\ndevhub data transform --template template.jq input.json\n\n# Merge multiple files\ndevhub data merge --format json file1.json file2.json --output merged.json\n</code></pre> <p>For advanced data manipulation examples, see: DevHub Data Examples</p>"},{"location":"user-guide/formatting/","title":"Code Formatting","text":"<p>DevHub's formatting plugin provides powerful multi-language code formatting capabilities with a unified interface and beautiful output.</p>"},{"location":"user-guide/formatting/#overview","title":"\ud83c\udfaf Overview","text":"<p>The format plugin supports:</p> <ul> <li>Python: Black, autopep8, yapf + isort</li> <li>JavaScript/TypeScript: Prettier + ESLint</li> <li>Go: gofmt + goimports</li> <li>Rust: rustfmt</li> <li>JSON: Built-in formatter</li> <li>YAML: Built-in formatter</li> <li>CSS/SCSS: Prettier</li> <li>HTML: Prettier</li> <li>Markdown: Prettier</li> </ul>"},{"location":"user-guide/formatting/#basic-usage","title":"\ud83d\ude80 Basic Usage","text":""},{"location":"user-guide/formatting/#format-single-files","title":"Format Single Files","text":"<pre><code># Auto-detect file type and format\ndevhub format code main.py\n\n# Specify language explicitly\ndevhub format code --lang python main.py\n\n# Format multiple files\ndevhub format code src/main.py src/utils.py tests/test_main.py\n</code></pre>"},{"location":"user-guide/formatting/#format-directories","title":"Format Directories","text":"<pre><code># Format entire directory\ndevhub format code src/\n\n# Format with specific language\ndevhub format code --lang python src/\n\n# Format multiple languages\ndevhub format code --lang python,javascript src/\n\n# Recursive formatting\ndevhub format code --recursive project/\n</code></pre>"},{"location":"user-guide/formatting/#dry-run-mode","title":"Dry Run Mode","text":"<pre><code># Preview changes without applying\ndevhub format code --dry-run src/\n\n# Check if files need formatting\ndevhub format code --check src/\n\n# Exit with error if formatting needed (CI/CD)\ndevhub format code --check --fail-on-change src/\n</code></pre>"},{"location":"user-guide/formatting/#python-formatting","title":"\ud83d\udc0d Python Formatting","text":""},{"location":"user-guide/formatting/#black-integration","title":"Black Integration","text":"<pre><code># Format with Black (default)\ndevhub format code --lang python src/\n\n# Custom line length\ndevhub format code --lang python --line-length 100 src/\n\n# Fast mode\ndevhub format code --lang python --fast src/\n\n# Specific Python versions\ndevhub format code --lang python --target-version py38,py39 src/\n</code></pre>"},{"location":"user-guide/formatting/#configuration","title":"Configuration","text":"<pre><code>[format.python]\nenabled = true\nformatter = \"black\"  # or \"autopep8\", \"yapf\"\nline_length = 88\ntarget_version = [\"py38\", \"py39\", \"py310\"]\nskip_string_normalization = false\nskip_magic_trailing_comma = false\n\n# Import sorting with isort\nisort_enabled = true\nisort_profile = \"black\"\nisort_line_length = 88\nisort_multi_line_output = 3\n\n# Additional Black arguments\nblack_args = [\"--fast\"]\n</code></pre>"},{"location":"user-guide/formatting/#examples","title":"Examples","text":"<pre><code># Format Python files with custom settings\ndevhub format code \\\n  --lang python \\\n  --line-length 100 \\\n  --target-version py39 \\\n  src/\n\n# Format with import sorting\ndevhub format code \\\n  --lang python \\\n  --isort \\\n  --isort-profile black \\\n  src/\n\n# Check formatting for CI\ndevhub format code \\\n  --lang python \\\n  --check \\\n  --diff \\\n  src/\n</code></pre>"},{"location":"user-guide/formatting/#javascripttypescript-formatting","title":"\ud83c\udf10 JavaScript/TypeScript Formatting","text":""},{"location":"user-guide/formatting/#prettier-integration","title":"Prettier Integration","text":"<pre><code># Format JavaScript/TypeScript\ndevhub format code --lang javascript src/\ndevhub format code --lang typescript src/\n\n# Custom settings\ndevhub format code \\\n  --lang javascript \\\n  --print-width 120 \\\n  --tab-width 4 \\\n  --single-quote \\\n  src/\n</code></pre>"},{"location":"user-guide/formatting/#configuration_1","title":"Configuration","text":"<pre><code>[format.javascript]\nenabled = true\nformatter = \"prettier\"\nprint_width = 80\ntab_width = 2\nuse_tabs = false\nsemicolons = true\nsingle_quote = false\ntrailing_comma = \"es5\"\nbracket_spacing = true\narrow_parens = \"always\"\n\n[format.typescript]\nenabled = true\nformatter = \"prettier\"\nprint_width = 80\ntab_width = 2\n# Inherits from javascript config\n</code></pre>"},{"location":"user-guide/formatting/#go-formatting","title":"\ud83d\udd27 Go Formatting","text":"<pre><code># Format Go files\ndevhub format code --lang go src/\n\n# With imports organization\ndevhub format code --lang go --imports src/\n\n# Simplify code\ndevhub format code --lang go --simplify src/\n</code></pre>"},{"location":"user-guide/formatting/#configuration_2","title":"Configuration","text":"<pre><code>[format.go]\nenabled = true\nformatter = \"gofmt\"\nsimplify = true\nimports = true  # Use goimports\n</code></pre>"},{"location":"user-guide/formatting/#rust-formatting","title":"\ud83e\udd80 Rust Formatting","text":"<pre><code># Format Rust files\ndevhub format code --lang rust src/\n\n# Custom edition\ndevhub format code --lang rust --edition 2021 src/\n\n# Check formatting\ndevhub format code --lang rust --check src/\n</code></pre>"},{"location":"user-guide/formatting/#configuration_3","title":"Configuration","text":"<pre><code>[format.rust]\nenabled = true\nformatter = \"rustfmt\"\nedition = \"2021\"\nmax_width = 100\nhard_tabs = false\ntab_spaces = 4\n</code></pre>"},{"location":"user-guide/formatting/#data-format-formatting","title":"\ud83d\udcc4 Data Format Formatting","text":""},{"location":"user-guide/formatting/#json","title":"JSON","text":"<pre><code># Format JSON files\ndevhub format code --lang json data/\n\n# Custom indentation\ndevhub format code --lang json --indent 4 config.json\n\n# Sort keys\ndevhub format code --lang json --sort-keys data.json\n</code></pre>"},{"location":"user-guide/formatting/#yaml","title":"YAML","text":"<pre><code># Format YAML files\ndevhub format code --lang yaml config/\n\n# Custom settings\ndevhub format code \\\n  --lang yaml \\\n  --indent 4 \\\n  --width 120 \\\n  config.yaml\n</code></pre>"},{"location":"user-guide/formatting/#configuration_4","title":"Configuration","text":"<pre><code>[format.json]\nenabled = true\nindent = 2\nsort_keys = false\nensure_ascii = false\n\n[format.yaml]\nenabled = true\nindent = 2\nwidth = 80\ndefault_flow_style = false\n</code></pre>"},{"location":"user-guide/formatting/#advanced-features","title":"\ud83c\udfa8 Advanced Features","text":""},{"location":"user-guide/formatting/#language-detection","title":"Language Detection","text":"<p>DevHub automatically detects file types:</p> <pre><code># Auto-detection based on file extension\ndevhub format code src/main.py        # Detected as Python\ndevhub format code src/app.js         # Detected as JavaScript\ndevhub format code config.json        # Detected as JSON\n\n# Override detection\ndevhub format code --lang python script  # No extension\n</code></pre>"},{"location":"user-guide/formatting/#batch-operations","title":"Batch Operations","text":"<pre><code># Format multiple file types\ndevhub format code \\\n  --lang python,javascript,json \\\n  --recursive \\\n  project/\n\n# Format specific patterns\ndevhub format code --pattern \"*.py,*.js\" src/\n\n# Exclude patterns\ndevhub format code --exclude \"*.min.js,*test*\" src/\n</code></pre>"},{"location":"user-guide/formatting/#backup-and-safety","title":"Backup and Safety","text":"<pre><code># Create backups before formatting\ndevhub format code --backup src/\n\n# Custom backup directory\ndevhub format code --backup-dir .backups src/\n\n# Restore from backup\ndevhub format restore --backup-id 20231201_143052\n</code></pre>"},{"location":"user-guide/formatting/#integration-with-git","title":"Integration with Git","text":"<pre><code># Format only changed files\ndevhub format code --git-diff HEAD~1\n\n# Format staged files\ndevhub format code --git-staged\n\n# Format files in current branch\ndevhub format code --git-branch feature/new-feature\n</code></pre>"},{"location":"user-guide/formatting/#output-and-reporting","title":"\ud83d\udcca Output and Reporting","text":""},{"location":"user-guide/formatting/#progress-and-statistics","title":"Progress and Statistics","text":"<pre><code># Show progress bar\ndevhub format code --progress src/\n\n# Detailed statistics\ndevhub format code --stats src/\n\n# JSON output for parsing\ndevhub format code --output json src/\n</code></pre>"},{"location":"user-guide/formatting/#diff-output","title":"Diff Output","text":"<pre><code># Show differences\ndevhub format code --diff src/\n\n# Colored diff\ndevhub format code --diff --color src/\n\n# Save diff to file\ndevhub format code --diff --output-file changes.diff src/\n</code></pre>"},{"location":"user-guide/formatting/#configuration-examples","title":"\ud83d\udd27 Configuration Examples","text":""},{"location":"user-guide/formatting/#project-specific-configuration","title":"Project-specific Configuration","text":"<pre><code># .devhub.toml in project root\n[format]\nline_length = 120\nauto_detect = true\nbackup = false\n\n[format.python]\nenabled = true\nformatter = \"black\"\nline_length = 120\ntarget_version = [\"py39\"]\nisort_enabled = true\nisort_profile = \"black\"\n\n[format.javascript]\nenabled = true\nprint_width = 120\nsingle_quote = true\ntrailing_comma = \"all\"\n</code></pre>"},{"location":"user-guide/formatting/#team-configuration","title":"Team Configuration","text":"<pre><code># Shared team configuration\n[format]\nline_length = 88\nauto_detect = true\nbackup = true\n\n[format.python]\nenabled = true\nformatter = \"black\"\nisort_enabled = true\nisort_profile = \"black\"\n\n# Enforce consistent settings\n[format.javascript]\nenabled = true\nformatter = \"prettier\"\nprint_width = 80\ntab_width = 2\nsingle_quote = false\n</code></pre>"},{"location":"user-guide/formatting/#cicd-integration","title":"\ud83d\ude80 CI/CD Integration","text":""},{"location":"user-guide/formatting/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Code Format Check\non: [push, pull_request]\n\njobs:\n  format:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n    - name: Install DevHub\n      run: pip install devhub-cli\n    - name: Check formatting\n      run: devhub format code --check --fail-on-change src/\n</code></pre>"},{"location":"user-guide/formatting/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: devhub-format\n        name: DevHub Format\n        entry: devhub format code\n        language: system\n        types: [python, javascript, typescript]\n</code></pre>"},{"location":"user-guide/formatting/#makenpm-scripts","title":"Make/npm Scripts","text":"<pre><code># Makefile\nformat:\n    devhub format code src/\n\nformat-check:\n    devhub format code --check src/\n\nformat-diff:\n    devhub format code --diff src/\n</code></pre> <pre><code>{\n  \"scripts\": {\n    \"format\": \"devhub format code src/\",\n    \"format:check\": \"devhub format code --check src/\",\n    \"format:diff\": \"devhub format code --diff src/\"\n  }\n}\n</code></pre>"},{"location":"user-guide/formatting/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"user-guide/formatting/#common-issues","title":"Common Issues","text":"<p>Formatter not found <pre><code># Install required formatter\npip install black isort  # For Python\nnpm install -g prettier  # For JavaScript\n\n# Check installed formatters\ndevhub format check-deps\n</code></pre></p> <p>Permission errors <pre><code># Check file permissions\nls -la src/main.py\n\n# Fix permissions\nchmod 644 src/main.py\n</code></pre></p> <p>Configuration conflicts <pre><code># Validate configuration\ndevhub config validate\n\n# Check formatter-specific configs\ndevhub format config-check --lang python\n</code></pre></p>"},{"location":"user-guide/formatting/#performance-tips","title":"Performance Tips","text":"<ul> <li>Use <code>--fast</code> mode for Python formatting in development</li> <li>Format incrementally with <code>--git-diff</code> in large projects</li> <li>Use <code>--parallel</code> for faster directory formatting</li> <li>Exclude large files with <code>--exclude</code> patterns</li> </ul>"},{"location":"user-guide/formatting/#examples-repository","title":"\ud83d\udcda Examples Repository","text":"<p>For more examples and configuration templates, visit: DevHub Examples</p>"},{"location":"user-guide/git/","title":"Git Tools","text":"<p>DevHub's Git plugin provides powerful automation for common Git workflows, branch management, and repository analysis.</p>"},{"location":"user-guide/git/#overview","title":"\ud83c\udfaf Overview","text":"<p>The Git plugin offers: - Branch management and cleanup - Commit analysis and statistics - Workflow automation - Repository health checks - Conventional commits support - Git hooks integration</p>"},{"location":"user-guide/git/#branch-management","title":"\ud83c\udf3f Branch Management","text":""},{"location":"user-guide/git/#branch-cleanup","title":"Branch Cleanup","text":"<pre><code># Clean up merged branches\ndevhub git clean-branches --merged\n\n# Preview without deletion\ndevhub git clean-branches --merged --dry-run\n\n# Preserve specific branches\ndevhub git clean-branches --merged --preserve main,develop,staging\n</code></pre>"},{"location":"user-guide/git/#branch-analysis","title":"Branch Analysis","text":"<pre><code># List all branches with info\ndevhub git branches --info\n\n# Find stale branches\ndevhub git branches --stale --days 30\n\n# Branch comparison\ndevhub git compare-branches feature/new main\n</code></pre>"},{"location":"user-guide/git/#commit-analysis","title":"\ud83d\udcca Commit Analysis","text":""},{"location":"user-guide/git/#repository-statistics","title":"Repository Statistics","text":"<pre><code># Overall repository stats\ndevhub git stats\n\n# Commit analysis for time period\ndevhub git analyze --since \"1 month ago\"\n\n# Author contributions\ndevhub git contributors --since \"2023-01-01\"\n</code></pre>"},{"location":"user-guide/git/#commit-quality","title":"Commit Quality","text":"<pre><code># Check conventional commits\ndevhub git check-commits --conventional\n\n# Analyze commit messages\ndevhub git message-analysis --branch main\n\n# Find commits without issue references\ndevhub git orphan-commits\n</code></pre> <p>For detailed examples and configuration, see the Git Tools Documentation.</p>"},{"location":"user-guide/security/","title":"Security Tools","text":"<p>DevHub's security plugin provides essential cryptographic and security utilities for developers.</p>"},{"location":"user-guide/security/#password-generation","title":"\ud83d\udd10 Password Generation","text":""},{"location":"user-guide/security/#secure-passwords","title":"Secure Passwords","text":"<pre><code># Generate strong password\ndevhub security password --length 20\n\n# Include/exclude character types\ndevhub security password --length 16 --symbols --no-similar\n\n# Multiple passwords\ndevhub security password --count 5 --length 12\n</code></pre>"},{"location":"user-guide/security/#api-keys-and-tokens","title":"API Keys and Tokens","text":"<pre><code># Generate API key\ndevhub security apikey --length 32\n\n# Generate JWT secret\ndevhub security jwt-secret --length 64\n\n# Generate UUID\ndevhub security uuid --version 4\n</code></pre>"},{"location":"user-guide/security/#hashing-and-encryption","title":"\ud83d\udd12 Hashing and Encryption","text":""},{"location":"user-guide/security/#hash-generation","title":"Hash Generation","text":"<pre><code># SHA256 hash\ndevhub security hash --text \"hello world\" --algorithm sha256\n\n# Hash file contents\ndevhub security hash --file document.pdf --algorithm sha512\n\n# HMAC generation\ndevhub security hmac --text \"message\" --key \"secret\" --algorithm sha256\n</code></pre>"},{"location":"user-guide/security/#file-encryption","title":"File Encryption","text":"<pre><code># Encrypt file\ndevhub security encrypt --file sensitive.txt --password\n\n# Decrypt file\ndevhub security decrypt --file sensitive.txt.enc --password\n\n# Key-based encryption\ndevhub security encrypt --file data.txt --key-file public.key\n</code></pre>"},{"location":"user-guide/security/#security-scanning","title":"\ud83d\udee1\ufe0f Security Scanning","text":""},{"location":"user-guide/security/#password-strength","title":"Password Strength","text":"<pre><code># Check password strength\ndevhub security check-password \"mypassword123\"\n\n# Batch check from file\ndevhub security check-passwords --file passwords.txt\n</code></pre>"},{"location":"user-guide/security/#file-security","title":"File Security","text":"<pre><code># Scan for secrets in code\ndevhub security scan-secrets src/\n\n# Check file permissions\ndevhub security check-permissions --strict src/\n\n# Detect sensitive patterns\ndevhub security scan-patterns --config security-rules.yaml src/\n</code></pre> <p>For comprehensive security examples, visit: DevHub Security Examples</p>"},{"location":"user-guide/system/","title":"System Monitoring","text":"<p>DevHub's system plugin provides comprehensive system monitoring and process management capabilities.</p>"},{"location":"user-guide/system/#system-overview","title":"\ud83d\udcc8 System Overview","text":""},{"location":"user-guide/system/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># System overview\ndevhub system overview\n\n# CPU and memory usage\ndevhub system resources --interval 5\n\n# Disk usage analysis\ndevhub system disk --path /home/user --detailed\n</code></pre>"},{"location":"user-guide/system/#process-management","title":"Process Management","text":"<pre><code># List processes\ndevhub system processes --sort cpu\n\n# Monitor specific process\ndevhub system monitor --pid 1234 --interval 2\n\n# Find processes by name\ndevhub system find --name python --detailed\n</code></pre>"},{"location":"user-guide/system/#performance-analysis","title":"\ud83d\udd0d Performance Analysis","text":""},{"location":"user-guide/system/#system-metrics","title":"System Metrics","text":"<pre><code># Continuous monitoring\ndevhub system monitor --duration 60 --interval 5\n\n# Export metrics\ndevhub system metrics --output metrics.json --duration 30\n\n# Performance report\ndevhub system report --output report.html\n</code></pre>"},{"location":"user-guide/system/#network-monitoring","title":"Network Monitoring","text":"<pre><code># Network connections\ndevhub system network --connections\n\n# Bandwidth usage\ndevhub system network --bandwidth --interface eth0\n\n# Port analysis\ndevhub system ports --listening --detailed\n</code></pre>"},{"location":"user-guide/system/#alerting","title":"\ud83d\udea8 Alerting","text":""},{"location":"user-guide/system/#threshold-monitoring","title":"Threshold Monitoring","text":"<pre><code># CPU alert\ndevhub system alert --cpu 80 --action \"echo 'High CPU usage'\"\n\n# Memory alert\ndevhub system alert --memory 90 --webhook \"https://hooks.slack.com/...\"\n\n# Disk space alert\ndevhub system alert --disk 95 --path / --email admin@company.com\n</code></pre> <p>For comprehensive monitoring examples, visit: DevHub System Examples</p>"}]}